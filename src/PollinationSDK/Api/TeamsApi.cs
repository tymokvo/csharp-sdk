/* 
 * pollination-server
 *
 * Pollination Server OpenAPI Definition
 *
 * The version of the OpenAPI document: 0.13.1
 * Contact: info@pollination.cloud
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using PollinationSDK.Client;
using PollinationSDK.Model;

namespace PollinationSDK.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITeamsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a Team
        /// </summary>
        /// <remarks>
        /// Create a new team (must be parent org member)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName"></param>
        /// <param name="teamCreate"></param>
        /// <returns>CreatedContent</returns>
        CreatedContent CreateTeam (string orgName, TeamCreate teamCreate);

        /// <summary>
        /// Create a Team
        /// </summary>
        /// <remarks>
        /// Create a new team (must be parent org member)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName"></param>
        /// <param name="teamCreate"></param>
        /// <returns>ApiResponse of CreatedContent</returns>
        ApiResponse<CreatedContent> CreateTeamWithHttpInfo (string orgName, TeamCreate teamCreate);
        /// <summary>
        /// Remove a team member
        /// </summary>
        /// <remarks>
        /// Remove a member from the org (must have org &#x60;owner&#x60; role)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName"></param>
        /// <param name="teamSlug"></param>
        /// <param name="username"></param>
        /// <returns></returns>
        void DeleteOrgTeamMember (string orgName, string teamSlug, string username);

        /// <summary>
        /// Remove a team member
        /// </summary>
        /// <remarks>
        /// Remove a member from the org (must have org &#x60;owner&#x60; role)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName"></param>
        /// <param name="teamSlug"></param>
        /// <param name="username"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteOrgTeamMemberWithHttpInfo (string orgName, string teamSlug, string username);
        /// <summary>
        /// Delete a Team
        /// </summary>
        /// <remarks>
        /// Delete a team (must have team or org &#x60;owner&#x60; role)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName"></param>
        /// <param name="teamSlug"></param>
        /// <returns></returns>
        void DeleteTeam (string orgName, string teamSlug);

        /// <summary>
        /// Delete a Team
        /// </summary>
        /// <remarks>
        /// Delete a team (must have team or org &#x60;owner&#x60; role)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName"></param>
        /// <param name="teamSlug"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTeamWithHttpInfo (string orgName, string teamSlug);
        /// <summary>
        /// List team members
        /// </summary>
        /// <remarks>
        /// Retrieve a tean&#39;s members
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName"></param>
        /// <param name="teamSlug"></param>
        /// <returns>TeamMemberList</returns>
        TeamMemberList GetOrgTeamMembers (string orgName, string teamSlug);

        /// <summary>
        /// List team members
        /// </summary>
        /// <remarks>
        /// Retrieve a tean&#39;s members
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName"></param>
        /// <param name="teamSlug"></param>
        /// <returns>ApiResponse of TeamMemberList</returns>
        ApiResponse<TeamMemberList> GetOrgTeamMembersWithHttpInfo (string orgName, string teamSlug);
        /// <summary>
        /// Get a Team
        /// </summary>
        /// <remarks>
        /// Retrieve a team by name
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName"></param>
        /// <param name="teamSlug"></param>
        /// <returns>Team</returns>
        Team GetTeam (string orgName, string teamSlug);

        /// <summary>
        /// Get a Team
        /// </summary>
        /// <remarks>
        /// Retrieve a team by name
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName"></param>
        /// <param name="teamSlug"></param>
        /// <returns>ApiResponse of Team</returns>
        ApiResponse<Team> GetTeamWithHttpInfo (string orgName, string teamSlug);
        /// <summary>
        /// List Teams
        /// </summary>
        /// <remarks>
        /// search for orgs using query parameters
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName"></param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="search">You know, for search (optional)</param>
        /// <param name="name">The account name (optional)</param>
        /// <param name="member">The ID of a user (optional)</param>
        /// <returns>TeamList</returns>
        TeamList ListOrgTeams (string orgName, int? page = default, int? perPage = default, List<string> search = default, List<string> name = default, List<string> member = default);

        /// <summary>
        /// List Teams
        /// </summary>
        /// <remarks>
        /// search for orgs using query parameters
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName"></param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="search">You know, for search (optional)</param>
        /// <param name="name">The account name (optional)</param>
        /// <param name="member">The ID of a user (optional)</param>
        /// <returns>ApiResponse of TeamList</returns>
        ApiResponse<TeamList> ListOrgTeamsWithHttpInfo (string orgName, int? page = default, int? perPage = default, List<string> search = default, List<string> name = default, List<string> member = default);
        /// <summary>
        /// Update a Team
        /// </summary>
        /// <remarks>
        /// Update a team (must have team or org &#x60;owner&#x60; role)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName"></param>
        /// <param name="teamSlug"></param>
        /// <param name="teamUpdate"></param>
        /// <returns>UpdateAccepted</returns>
        UpdateAccepted UpdateTeam (string orgName, string teamSlug, TeamUpdate teamUpdate);

        /// <summary>
        /// Update a Team
        /// </summary>
        /// <remarks>
        /// Update a team (must have team or org &#x60;owner&#x60; role)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName"></param>
        /// <param name="teamSlug"></param>
        /// <param name="teamUpdate"></param>
        /// <returns>ApiResponse of UpdateAccepted</returns>
        ApiResponse<UpdateAccepted> UpdateTeamWithHttpInfo (string orgName, string teamSlug, TeamUpdate teamUpdate);
        /// <summary>
        /// Add or update the role of an Team Member
        /// </summary>
        /// <remarks>
        /// Upsert a member role to the team (must have org or team &#x60;owner&#x60; role)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName"></param>
        /// <param name="teamSlug"></param>
        /// <param name="username"></param>
        /// <param name="role"></param>
        /// <returns>UpdateAccepted</returns>
        UpdateAccepted UpsertOrgTeamMember (string orgName, string teamSlug, string username, TeamRoleEnum role);

        /// <summary>
        /// Add or update the role of an Team Member
        /// </summary>
        /// <remarks>
        /// Upsert a member role to the team (must have org or team &#x60;owner&#x60; role)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName"></param>
        /// <param name="teamSlug"></param>
        /// <param name="username"></param>
        /// <param name="role"></param>
        /// <returns>ApiResponse of UpdateAccepted</returns>
        ApiResponse<UpdateAccepted> UpsertOrgTeamMemberWithHttpInfo (string orgName, string teamSlug, string username, TeamRoleEnum role);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a Team
        /// </summary>
        /// <remarks>
        /// Create a new team (must be parent org member)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName"></param>
        /// <param name="teamCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CreatedContent</returns>
        System.Threading.Tasks.Task<CreatedContent> CreateTeamAsync (string orgName, TeamCreate teamCreate, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a Team
        /// </summary>
        /// <remarks>
        /// Create a new team (must be parent org member)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName"></param>
        /// <param name="teamCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CreatedContent)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreatedContent>> CreateTeamWithHttpInfoAsync (string orgName, TeamCreate teamCreate, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Remove a team member
        /// </summary>
        /// <remarks>
        /// Remove a member from the org (must have org &#x60;owner&#x60; role)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName"></param>
        /// <param name="teamSlug"></param>
        /// <param name="username"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteOrgTeamMemberAsync (string orgName, string teamSlug, string username, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Remove a team member
        /// </summary>
        /// <remarks>
        /// Remove a member from the org (must have org &#x60;owner&#x60; role)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName"></param>
        /// <param name="teamSlug"></param>
        /// <param name="username"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOrgTeamMemberWithHttpInfoAsync (string orgName, string teamSlug, string username, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete a Team
        /// </summary>
        /// <remarks>
        /// Delete a team (must have team or org &#x60;owner&#x60; role)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName"></param>
        /// <param name="teamSlug"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTeamAsync (string orgName, string teamSlug, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a Team
        /// </summary>
        /// <remarks>
        /// Delete a team (must have team or org &#x60;owner&#x60; role)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName"></param>
        /// <param name="teamSlug"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTeamWithHttpInfoAsync (string orgName, string teamSlug, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List team members
        /// </summary>
        /// <remarks>
        /// Retrieve a tean&#39;s members
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName"></param>
        /// <param name="teamSlug"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TeamMemberList</returns>
        System.Threading.Tasks.Task<TeamMemberList> GetOrgTeamMembersAsync (string orgName, string teamSlug, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List team members
        /// </summary>
        /// <remarks>
        /// Retrieve a tean&#39;s members
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName"></param>
        /// <param name="teamSlug"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TeamMemberList)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamMemberList>> GetOrgTeamMembersWithHttpInfoAsync (string orgName, string teamSlug, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get a Team
        /// </summary>
        /// <remarks>
        /// Retrieve a team by name
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName"></param>
        /// <param name="teamSlug"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Team</returns>
        System.Threading.Tasks.Task<Team> GetTeamAsync (string orgName, string teamSlug, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a Team
        /// </summary>
        /// <remarks>
        /// Retrieve a team by name
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName"></param>
        /// <param name="teamSlug"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Team)</returns>
        System.Threading.Tasks.Task<ApiResponse<Team>> GetTeamWithHttpInfoAsync (string orgName, string teamSlug, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List Teams
        /// </summary>
        /// <remarks>
        /// search for orgs using query parameters
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName"></param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="search">You know, for search (optional)</param>
        /// <param name="name">The account name (optional)</param>
        /// <param name="member">The ID of a user (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TeamList</returns>
        System.Threading.Tasks.Task<TeamList> ListOrgTeamsAsync (string orgName, int? page = default, int? perPage = default, List<string> search = default, List<string> name = default, List<string> member = default, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List Teams
        /// </summary>
        /// <remarks>
        /// search for orgs using query parameters
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName"></param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="search">You know, for search (optional)</param>
        /// <param name="name">The account name (optional)</param>
        /// <param name="member">The ID of a user (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TeamList)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamList>> ListOrgTeamsWithHttpInfoAsync (string orgName, int? page = default, int? perPage = default, List<string> search = default, List<string> name = default, List<string> member = default, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update a Team
        /// </summary>
        /// <remarks>
        /// Update a team (must have team or org &#x60;owner&#x60; role)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName"></param>
        /// <param name="teamSlug"></param>
        /// <param name="teamUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UpdateAccepted</returns>
        System.Threading.Tasks.Task<UpdateAccepted> UpdateTeamAsync (string orgName, string teamSlug, TeamUpdate teamUpdate, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update a Team
        /// </summary>
        /// <remarks>
        /// Update a team (must have team or org &#x60;owner&#x60; role)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName"></param>
        /// <param name="teamSlug"></param>
        /// <param name="teamUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UpdateAccepted)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateAccepted>> UpdateTeamWithHttpInfoAsync (string orgName, string teamSlug, TeamUpdate teamUpdate, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Add or update the role of an Team Member
        /// </summary>
        /// <remarks>
        /// Upsert a member role to the team (must have org or team &#x60;owner&#x60; role)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName"></param>
        /// <param name="teamSlug"></param>
        /// <param name="username"></param>
        /// <param name="role"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UpdateAccepted</returns>
        System.Threading.Tasks.Task<UpdateAccepted> UpsertOrgTeamMemberAsync (string orgName, string teamSlug, string username, TeamRoleEnum role, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Add or update the role of an Team Member
        /// </summary>
        /// <remarks>
        /// Upsert a member role to the team (must have org or team &#x60;owner&#x60; role)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName"></param>
        /// <param name="teamSlug"></param>
        /// <param name="username"></param>
        /// <param name="role"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UpdateAccepted)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateAccepted>> UpsertOrgTeamMemberWithHttpInfoAsync (string orgName, string teamSlug, string username, TeamRoleEnum role, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TeamsApi : ITeamsApi
    {
        private PollinationSDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TeamsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TeamsApi(String basePath)
        {
            this.Configuration = new PollinationSDK.Client.Configuration { BasePath = basePath };

            ExceptionFactory = PollinationSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TeamsApi"/> class
        /// </summary>
        /// <returns></returns>
        public TeamsApi()
        {
            this.Configuration = PollinationSDK.Client.Configuration.Default;

            ExceptionFactory = PollinationSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TeamsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TeamsApi(PollinationSDK.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = PollinationSDK.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = PollinationSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public PollinationSDK.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public PollinationSDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a Team Create a new team (must be parent org member)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName"></param>
        /// <param name="teamCreate"></param>
        /// <returns>CreatedContent</returns>
        public CreatedContent CreateTeam (string orgName, TeamCreate teamCreate)
        {
             ApiResponse<CreatedContent> localVarResponse = CreateTeamWithHttpInfo(orgName, teamCreate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Team Create a new team (must be parent org member)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName"></param>
        /// <param name="teamCreate"></param>
        /// <returns>ApiResponse of CreatedContent</returns>
        public ApiResponse<CreatedContent> CreateTeamWithHttpInfo (string orgName, TeamCreate teamCreate)
        {
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling TeamsApi->CreateTeam");
            // verify the required parameter 'teamCreate' is set
            if (teamCreate == null)
                throw new ApiException(400, "Missing required parameter 'teamCreate' when calling TeamsApi->CreateTeam");

            var localVarPath = "/orgs/{org_name}/teams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (teamCreate != null && teamCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(teamCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = teamCreate; // byte array
            }

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTeam", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreatedContent>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreatedContent) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreatedContent)));
        }

        /// <summary>
        /// Create a Team Create a new team (must be parent org member)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName"></param>
        /// <param name="teamCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CreatedContent</returns>
        public async System.Threading.Tasks.Task<CreatedContent> CreateTeamAsync (string orgName, TeamCreate teamCreate, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CreatedContent> localVarResponse = await CreateTeamWithHttpInfoAsync(orgName, teamCreate, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a Team Create a new team (must be parent org member)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName"></param>
        /// <param name="teamCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CreatedContent)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreatedContent>> CreateTeamWithHttpInfoAsync (string orgName, TeamCreate teamCreate, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling TeamsApi->CreateTeam");
            // verify the required parameter 'teamCreate' is set
            if (teamCreate == null)
                throw new ApiException(400, "Missing required parameter 'teamCreate' when calling TeamsApi->CreateTeam");

            var localVarPath = "/orgs/{org_name}/teams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (teamCreate != null && teamCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(teamCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = teamCreate; // byte array
            }

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTeam", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreatedContent>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreatedContent) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreatedContent)));
        }

        /// <summary>
        /// Remove a team member Remove a member from the org (must have org &#x60;owner&#x60; role)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName"></param>
        /// <param name="teamSlug"></param>
        /// <param name="username"></param>
        /// <returns></returns>
        public void DeleteOrgTeamMember (string orgName, string teamSlug, string username)
        {
             DeleteOrgTeamMemberWithHttpInfo(orgName, teamSlug, username);
        }

        /// <summary>
        /// Remove a team member Remove a member from the org (must have org &#x60;owner&#x60; role)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName"></param>
        /// <param name="teamSlug"></param>
        /// <param name="username"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteOrgTeamMemberWithHttpInfo (string orgName, string teamSlug, string username)
        {
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling TeamsApi->DeleteOrgTeamMember");
            // verify the required parameter 'teamSlug' is set
            if (teamSlug == null)
                throw new ApiException(400, "Missing required parameter 'teamSlug' when calling TeamsApi->DeleteOrgTeamMember");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling TeamsApi->DeleteOrgTeamMember");

            var localVarPath = "/orgs/{org_name}/teams/{team_slug}/members/{username}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (teamSlug != null) localVarPathParams.Add("team_slug", this.Configuration.ApiClient.ParameterToString(teamSlug)); // path parameter
            if (username != null) localVarPathParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOrgTeamMember", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Remove a team member Remove a member from the org (must have org &#x60;owner&#x60; role)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName"></param>
        /// <param name="teamSlug"></param>
        /// <param name="username"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteOrgTeamMemberAsync (string orgName, string teamSlug, string username, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteOrgTeamMemberWithHttpInfoAsync(orgName, teamSlug, username, cancellationToken);

        }

        /// <summary>
        /// Remove a team member Remove a member from the org (must have org &#x60;owner&#x60; role)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName"></param>
        /// <param name="teamSlug"></param>
        /// <param name="username"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOrgTeamMemberWithHttpInfoAsync (string orgName, string teamSlug, string username, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling TeamsApi->DeleteOrgTeamMember");
            // verify the required parameter 'teamSlug' is set
            if (teamSlug == null)
                throw new ApiException(400, "Missing required parameter 'teamSlug' when calling TeamsApi->DeleteOrgTeamMember");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling TeamsApi->DeleteOrgTeamMember");

            var localVarPath = "/orgs/{org_name}/teams/{team_slug}/members/{username}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (teamSlug != null) localVarPathParams.Add("team_slug", this.Configuration.ApiClient.ParameterToString(teamSlug)); // path parameter
            if (username != null) localVarPathParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOrgTeamMember", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete a Team Delete a team (must have team or org &#x60;owner&#x60; role)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName"></param>
        /// <param name="teamSlug"></param>
        /// <returns></returns>
        public void DeleteTeam (string orgName, string teamSlug)
        {
             DeleteTeamWithHttpInfo(orgName, teamSlug);
        }

        /// <summary>
        /// Delete a Team Delete a team (must have team or org &#x60;owner&#x60; role)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName"></param>
        /// <param name="teamSlug"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteTeamWithHttpInfo (string orgName, string teamSlug)
        {
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling TeamsApi->DeleteTeam");
            // verify the required parameter 'teamSlug' is set
            if (teamSlug == null)
                throw new ApiException(400, "Missing required parameter 'teamSlug' when calling TeamsApi->DeleteTeam");

            var localVarPath = "/orgs/{org_name}/teams/{team_slug}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (teamSlug != null) localVarPathParams.Add("team_slug", this.Configuration.ApiClient.ParameterToString(teamSlug)); // path parameter

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTeam", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete a Team Delete a team (must have team or org &#x60;owner&#x60; role)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName"></param>
        /// <param name="teamSlug"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTeamAsync (string orgName, string teamSlug, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteTeamWithHttpInfoAsync(orgName, teamSlug, cancellationToken);

        }

        /// <summary>
        /// Delete a Team Delete a team (must have team or org &#x60;owner&#x60; role)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName"></param>
        /// <param name="teamSlug"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTeamWithHttpInfoAsync (string orgName, string teamSlug, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling TeamsApi->DeleteTeam");
            // verify the required parameter 'teamSlug' is set
            if (teamSlug == null)
                throw new ApiException(400, "Missing required parameter 'teamSlug' when calling TeamsApi->DeleteTeam");

            var localVarPath = "/orgs/{org_name}/teams/{team_slug}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (teamSlug != null) localVarPathParams.Add("team_slug", this.Configuration.ApiClient.ParameterToString(teamSlug)); // path parameter

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTeam", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// List team members Retrieve a tean&#39;s members
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName"></param>
        /// <param name="teamSlug"></param>
        /// <returns>TeamMemberList</returns>
        public TeamMemberList GetOrgTeamMembers (string orgName, string teamSlug)
        {
             ApiResponse<TeamMemberList> localVarResponse = GetOrgTeamMembersWithHttpInfo(orgName, teamSlug);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List team members Retrieve a tean&#39;s members
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName"></param>
        /// <param name="teamSlug"></param>
        /// <returns>ApiResponse of TeamMemberList</returns>
        public ApiResponse<TeamMemberList> GetOrgTeamMembersWithHttpInfo (string orgName, string teamSlug)
        {
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling TeamsApi->GetOrgTeamMembers");
            // verify the required parameter 'teamSlug' is set
            if (teamSlug == null)
                throw new ApiException(400, "Missing required parameter 'teamSlug' when calling TeamsApi->GetOrgTeamMembers");

            var localVarPath = "/orgs/{org_name}/teams/{team_slug}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (teamSlug != null) localVarPathParams.Add("team_slug", this.Configuration.ApiClient.ParameterToString(teamSlug)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrgTeamMembers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamMemberList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TeamMemberList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamMemberList)));
        }

        /// <summary>
        /// List team members Retrieve a tean&#39;s members
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName"></param>
        /// <param name="teamSlug"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TeamMemberList</returns>
        public async System.Threading.Tasks.Task<TeamMemberList> GetOrgTeamMembersAsync (string orgName, string teamSlug, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TeamMemberList> localVarResponse = await GetOrgTeamMembersWithHttpInfoAsync(orgName, teamSlug, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List team members Retrieve a tean&#39;s members
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName"></param>
        /// <param name="teamSlug"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TeamMemberList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeamMemberList>> GetOrgTeamMembersWithHttpInfoAsync (string orgName, string teamSlug, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling TeamsApi->GetOrgTeamMembers");
            // verify the required parameter 'teamSlug' is set
            if (teamSlug == null)
                throw new ApiException(400, "Missing required parameter 'teamSlug' when calling TeamsApi->GetOrgTeamMembers");

            var localVarPath = "/orgs/{org_name}/teams/{team_slug}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (teamSlug != null) localVarPathParams.Add("team_slug", this.Configuration.ApiClient.ParameterToString(teamSlug)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrgTeamMembers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamMemberList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TeamMemberList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamMemberList)));
        }

        /// <summary>
        /// Get a Team Retrieve a team by name
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName"></param>
        /// <param name="teamSlug"></param>
        /// <returns>Team</returns>
        public Team GetTeam (string orgName, string teamSlug)
        {
             ApiResponse<Team> localVarResponse = GetTeamWithHttpInfo(orgName, teamSlug);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Team Retrieve a team by name
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName"></param>
        /// <param name="teamSlug"></param>
        /// <returns>ApiResponse of Team</returns>
        public ApiResponse<Team> GetTeamWithHttpInfo (string orgName, string teamSlug)
        {
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling TeamsApi->GetTeam");
            // verify the required parameter 'teamSlug' is set
            if (teamSlug == null)
                throw new ApiException(400, "Missing required parameter 'teamSlug' when calling TeamsApi->GetTeam");

            var localVarPath = "/orgs/{org_name}/teams/{team_slug}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (teamSlug != null) localVarPathParams.Add("team_slug", this.Configuration.ApiClient.ParameterToString(teamSlug)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeam", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Team>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Team) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Team)));
        }

        /// <summary>
        /// Get a Team Retrieve a team by name
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName"></param>
        /// <param name="teamSlug"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Team</returns>
        public async System.Threading.Tasks.Task<Team> GetTeamAsync (string orgName, string teamSlug, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Team> localVarResponse = await GetTeamWithHttpInfoAsync(orgName, teamSlug, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a Team Retrieve a team by name
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName"></param>
        /// <param name="teamSlug"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Team)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Team>> GetTeamWithHttpInfoAsync (string orgName, string teamSlug, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling TeamsApi->GetTeam");
            // verify the required parameter 'teamSlug' is set
            if (teamSlug == null)
                throw new ApiException(400, "Missing required parameter 'teamSlug' when calling TeamsApi->GetTeam");

            var localVarPath = "/orgs/{org_name}/teams/{team_slug}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (teamSlug != null) localVarPathParams.Add("team_slug", this.Configuration.ApiClient.ParameterToString(teamSlug)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTeam", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Team>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Team) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Team)));
        }

        /// <summary>
        /// List Teams search for orgs using query parameters
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName"></param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="search">You know, for search (optional)</param>
        /// <param name="name">The account name (optional)</param>
        /// <param name="member">The ID of a user (optional)</param>
        /// <returns>TeamList</returns>
        public TeamList ListOrgTeams (string orgName, int? page = default, int? perPage = default, List<string> search = default, List<string> name = default, List<string> member = default)
        {
             ApiResponse<TeamList> localVarResponse = ListOrgTeamsWithHttpInfo(orgName, page, perPage, search, name, member);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Teams search for orgs using query parameters
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName"></param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="search">You know, for search (optional)</param>
        /// <param name="name">The account name (optional)</param>
        /// <param name="member">The ID of a user (optional)</param>
        /// <returns>ApiResponse of TeamList</returns>
        public ApiResponse<TeamList> ListOrgTeamsWithHttpInfo (string orgName, int? page = default, int? perPage = default, List<string> search = default, List<string> name = default, List<string> member = default)
        {
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling TeamsApi->ListOrgTeams");

            var localVarPath = "/orgs/{org_name}/teams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per-page", perPage)); // query parameter
            if (search != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "search", search)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "name", name)); // query parameter
            if (member != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "member", member)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListOrgTeams", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TeamList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamList)));
        }

        /// <summary>
        /// List Teams search for orgs using query parameters
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName"></param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="search">You know, for search (optional)</param>
        /// <param name="name">The account name (optional)</param>
        /// <param name="member">The ID of a user (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TeamList</returns>
        public async System.Threading.Tasks.Task<TeamList> ListOrgTeamsAsync (string orgName, int? page = default, int? perPage = default, List<string> search = default, List<string> name = default, List<string> member = default, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TeamList> localVarResponse = await ListOrgTeamsWithHttpInfoAsync(orgName, page, perPage, search, name, member, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Teams search for orgs using query parameters
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName"></param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="search">You know, for search (optional)</param>
        /// <param name="name">The account name (optional)</param>
        /// <param name="member">The ID of a user (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TeamList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TeamList>> ListOrgTeamsWithHttpInfoAsync (string orgName, int? page = default, int? perPage = default, List<string> search = default, List<string> name = default, List<string> member = default, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling TeamsApi->ListOrgTeams");

            var localVarPath = "/orgs/{org_name}/teams";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per-page", perPage)); // query parameter
            if (search != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "search", search)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "name", name)); // query parameter
            if (member != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "member", member)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListOrgTeams", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TeamList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TeamList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TeamList)));
        }

        /// <summary>
        /// Update a Team Update a team (must have team or org &#x60;owner&#x60; role)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName"></param>
        /// <param name="teamSlug"></param>
        /// <param name="teamUpdate"></param>
        /// <returns>UpdateAccepted</returns>
        public UpdateAccepted UpdateTeam (string orgName, string teamSlug, TeamUpdate teamUpdate)
        {
             ApiResponse<UpdateAccepted> localVarResponse = UpdateTeamWithHttpInfo(orgName, teamSlug, teamUpdate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Team Update a team (must have team or org &#x60;owner&#x60; role)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName"></param>
        /// <param name="teamSlug"></param>
        /// <param name="teamUpdate"></param>
        /// <returns>ApiResponse of UpdateAccepted</returns>
        public ApiResponse<UpdateAccepted> UpdateTeamWithHttpInfo (string orgName, string teamSlug, TeamUpdate teamUpdate)
        {
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling TeamsApi->UpdateTeam");
            // verify the required parameter 'teamSlug' is set
            if (teamSlug == null)
                throw new ApiException(400, "Missing required parameter 'teamSlug' when calling TeamsApi->UpdateTeam");
            // verify the required parameter 'teamUpdate' is set
            if (teamUpdate == null)
                throw new ApiException(400, "Missing required parameter 'teamUpdate' when calling TeamsApi->UpdateTeam");

            var localVarPath = "/orgs/{org_name}/teams/{team_slug}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (teamSlug != null) localVarPathParams.Add("team_slug", this.Configuration.ApiClient.ParameterToString(teamSlug)); // path parameter
            if (teamUpdate != null && teamUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(teamUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = teamUpdate; // byte array
            }

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTeam", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateAccepted>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdateAccepted) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateAccepted)));
        }

        /// <summary>
        /// Update a Team Update a team (must have team or org &#x60;owner&#x60; role)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName"></param>
        /// <param name="teamSlug"></param>
        /// <param name="teamUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UpdateAccepted</returns>
        public async System.Threading.Tasks.Task<UpdateAccepted> UpdateTeamAsync (string orgName, string teamSlug, TeamUpdate teamUpdate, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<UpdateAccepted> localVarResponse = await UpdateTeamWithHttpInfoAsync(orgName, teamSlug, teamUpdate, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a Team Update a team (must have team or org &#x60;owner&#x60; role)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName"></param>
        /// <param name="teamSlug"></param>
        /// <param name="teamUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UpdateAccepted)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateAccepted>> UpdateTeamWithHttpInfoAsync (string orgName, string teamSlug, TeamUpdate teamUpdate, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling TeamsApi->UpdateTeam");
            // verify the required parameter 'teamSlug' is set
            if (teamSlug == null)
                throw new ApiException(400, "Missing required parameter 'teamSlug' when calling TeamsApi->UpdateTeam");
            // verify the required parameter 'teamUpdate' is set
            if (teamUpdate == null)
                throw new ApiException(400, "Missing required parameter 'teamUpdate' when calling TeamsApi->UpdateTeam");

            var localVarPath = "/orgs/{org_name}/teams/{team_slug}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (teamSlug != null) localVarPathParams.Add("team_slug", this.Configuration.ApiClient.ParameterToString(teamSlug)); // path parameter
            if (teamUpdate != null && teamUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(teamUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = teamUpdate; // byte array
            }

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTeam", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateAccepted>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdateAccepted) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateAccepted)));
        }

        /// <summary>
        /// Add or update the role of an Team Member Upsert a member role to the team (must have org or team &#x60;owner&#x60; role)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName"></param>
        /// <param name="teamSlug"></param>
        /// <param name="username"></param>
        /// <param name="role"></param>
        /// <returns>UpdateAccepted</returns>
        public UpdateAccepted UpsertOrgTeamMember (string orgName, string teamSlug, string username, TeamRoleEnum role)
        {
             ApiResponse<UpdateAccepted> localVarResponse = UpsertOrgTeamMemberWithHttpInfo(orgName, teamSlug, username, role);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add or update the role of an Team Member Upsert a member role to the team (must have org or team &#x60;owner&#x60; role)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName"></param>
        /// <param name="teamSlug"></param>
        /// <param name="username"></param>
        /// <param name="role"></param>
        /// <returns>ApiResponse of UpdateAccepted</returns>
        public ApiResponse<UpdateAccepted> UpsertOrgTeamMemberWithHttpInfo (string orgName, string teamSlug, string username, TeamRoleEnum role)
        {
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling TeamsApi->UpsertOrgTeamMember");
            // verify the required parameter 'teamSlug' is set
            if (teamSlug == null)
                throw new ApiException(400, "Missing required parameter 'teamSlug' when calling TeamsApi->UpsertOrgTeamMember");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling TeamsApi->UpsertOrgTeamMember");
            // verify the required parameter 'role' is set
            if (role == null)
                throw new ApiException(400, "Missing required parameter 'role' when calling TeamsApi->UpsertOrgTeamMember");

            var localVarPath = "/orgs/{org_name}/teams/{team_slug}/members/{username}/{role}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (teamSlug != null) localVarPathParams.Add("team_slug", this.Configuration.ApiClient.ParameterToString(teamSlug)); // path parameter
            if (username != null) localVarPathParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (role != null) localVarPathParams.Add("role", this.Configuration.ApiClient.ParameterToString(role)); // path parameter

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpsertOrgTeamMember", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateAccepted>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdateAccepted) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateAccepted)));
        }

        /// <summary>
        /// Add or update the role of an Team Member Upsert a member role to the team (must have org or team &#x60;owner&#x60; role)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName"></param>
        /// <param name="teamSlug"></param>
        /// <param name="username"></param>
        /// <param name="role"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UpdateAccepted</returns>
        public async System.Threading.Tasks.Task<UpdateAccepted> UpsertOrgTeamMemberAsync (string orgName, string teamSlug, string username, TeamRoleEnum role, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<UpdateAccepted> localVarResponse = await UpsertOrgTeamMemberWithHttpInfoAsync(orgName, teamSlug, username, role, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add or update the role of an Team Member Upsert a member role to the team (must have org or team &#x60;owner&#x60; role)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orgName"></param>
        /// <param name="teamSlug"></param>
        /// <param name="username"></param>
        /// <param name="role"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UpdateAccepted)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateAccepted>> UpsertOrgTeamMemberWithHttpInfoAsync (string orgName, string teamSlug, string username, TeamRoleEnum role, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'orgName' is set
            if (orgName == null)
                throw new ApiException(400, "Missing required parameter 'orgName' when calling TeamsApi->UpsertOrgTeamMember");
            // verify the required parameter 'teamSlug' is set
            if (teamSlug == null)
                throw new ApiException(400, "Missing required parameter 'teamSlug' when calling TeamsApi->UpsertOrgTeamMember");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling TeamsApi->UpsertOrgTeamMember");
            // verify the required parameter 'role' is set
            if (role == null)
                throw new ApiException(400, "Missing required parameter 'role' when calling TeamsApi->UpsertOrgTeamMember");

            var localVarPath = "/orgs/{org_name}/teams/{team_slug}/members/{username}/{role}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orgName != null) localVarPathParams.Add("org_name", this.Configuration.ApiClient.ParameterToString(orgName)); // path parameter
            if (teamSlug != null) localVarPathParams.Add("team_slug", this.Configuration.ApiClient.ParameterToString(teamSlug)); // path parameter
            if (username != null) localVarPathParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (role != null) localVarPathParams.Add("role", this.Configuration.ApiClient.ParameterToString(role)); // path parameter

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpsertOrgTeamMember", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateAccepted>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdateAccepted) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateAccepted)));
        }

    }
}
