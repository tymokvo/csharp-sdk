/* 
 * pollination-server
 *
 * Pollination Server OpenAPI Definition
 *
 * The version of the OpenAPI document: 0.13.1
 * Contact: info@pollination.cloud
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using PollinationSDK.Client;
using PollinationSDK.Model;

namespace PollinationSDK.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPluginsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a Plugin
        /// </summary>
        /// <remarks>
        /// Create a new plugin.
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="repositoryCreate"></param>
        /// <returns>CreatedContent</returns>
        CreatedContent CreatePlugin (string owner, RepositoryCreate repositoryCreate);

        /// <summary>
        /// Create a Plugin
        /// </summary>
        /// <remarks>
        /// Create a new plugin.
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="repositoryCreate"></param>
        /// <returns>ApiResponse of CreatedContent</returns>
        ApiResponse<CreatedContent> CreatePluginWithHttpInfo (string owner, RepositoryCreate repositoryCreate);
        /// <summary>
        /// Create a new Plugin package
        /// </summary>
        /// <remarks>
        /// Create a new plugin package version
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="newPluginPackage"></param>
        /// <returns>CreatedContent</returns>
        CreatedContent CreatePluginPackage (string owner, string name, NewPluginPackage newPluginPackage);

        /// <summary>
        /// Create a new Plugin package
        /// </summary>
        /// <remarks>
        /// Create a new plugin package version
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="newPluginPackage"></param>
        /// <returns>ApiResponse of CreatedContent</returns>
        ApiResponse<CreatedContent> CreatePluginPackageWithHttpInfo (string owner, string name, NewPluginPackage newPluginPackage);
        /// <summary>
        /// Delete a Plugin
        /// </summary>
        /// <remarks>
        /// Delete a plugin (must have &#x60;admin&#x60; permission)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <returns></returns>
        void DeletePlugin (string owner, string name);

        /// <summary>
        /// Delete a Plugin
        /// </summary>
        /// <remarks>
        /// Delete a plugin (must have &#x60;admin&#x60; permission)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePluginWithHttpInfo (string owner, string name);
        /// <summary>
        /// Remove a Repository permissions
        /// </summary>
        /// <remarks>
        /// Delete a plugin&#39;s access policy (must have &#x60;admin&#x60; permission)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="repositoryPolicySubject"></param>
        /// <returns></returns>
        void DeletePluginOrgPermission (string owner, string name, RepositoryPolicySubject repositoryPolicySubject);

        /// <summary>
        /// Remove a Repository permissions
        /// </summary>
        /// <remarks>
        /// Delete a plugin&#39;s access policy (must have &#x60;admin&#x60; permission)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="repositoryPolicySubject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePluginOrgPermissionWithHttpInfo (string owner, string name, RepositoryPolicySubject repositoryPolicySubject);
        /// <summary>
        /// Get a plugin
        /// </summary>
        /// <remarks>
        /// Retrieve a plugin by name
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <returns>Repository</returns>
        Repository GetPlugin (string owner, string name);

        /// <summary>
        /// Get a plugin
        /// </summary>
        /// <remarks>
        /// Retrieve a plugin by name
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <returns>ApiResponse of Repository</returns>
        ApiResponse<Repository> GetPluginWithHttpInfo (string owner, string name);
        /// <summary>
        /// Get plugin access permissions
        /// </summary>
        /// <remarks>
        /// Retrieve a plugin&#39;s access permissions (must have &#x60;write&#x60; permission)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="subjectType">The type of access policy subject (optional)</param>
        /// <param name="permission">An access policy permission string (optional)</param>
        /// <returns>RepositoryAccessPolicyList</returns>
        RepositoryAccessPolicyList GetPluginAccessPermissions (string owner, string name, int? page = default, int? perPage = default, List<string> subjectType = default, List<string> permission = default);

        /// <summary>
        /// Get plugin access permissions
        /// </summary>
        /// <remarks>
        /// Retrieve a plugin&#39;s access permissions (must have &#x60;write&#x60; permission)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="subjectType">The type of access policy subject (optional)</param>
        /// <param name="permission">An access policy permission string (optional)</param>
        /// <returns>ApiResponse of RepositoryAccessPolicyList</returns>
        ApiResponse<RepositoryAccessPolicyList> GetPluginAccessPermissionsWithHttpInfo (string owner, string name, int? page = default, int? perPage = default, List<string> subjectType = default, List<string> permission = default);
        /// <summary>
        /// Get a plugin tag
        /// </summary>
        /// <remarks>
        /// Retrieve a plugin tag by name and tag
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="tag"></param>
        /// <returns>PluginPackage</returns>
        PluginPackage GetPluginByTag (string owner, string name, string tag);

        /// <summary>
        /// Get a plugin tag
        /// </summary>
        /// <remarks>
        /// Retrieve a plugin tag by name and tag
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="tag"></param>
        /// <returns>ApiResponse of PluginPackage</returns>
        ApiResponse<PluginPackage> GetPluginByTagWithHttpInfo (string owner, string name, string tag);
        /// <summary>
        /// Get a plugin tags
        /// </summary>
        /// <remarks>
        /// Retrieve a plugin by name
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <returns>PluginPackageList</returns>
        PluginPackageList ListPluginTags (string owner, string name, int? page = default, int? perPage = default);

        /// <summary>
        /// Get a plugin tags
        /// </summary>
        /// <remarks>
        /// Retrieve a plugin by name
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <returns>ApiResponse of PluginPackageList</returns>
        ApiResponse<PluginPackageList> ListPluginTagsWithHttpInfo (string owner, string name, int? page = default, int? perPage = default);
        /// <summary>
        /// List plugins
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="search">You know, for search (optional)</param>
        /// <param name="name">The account name (optional)</param>
        /// <param name="owner">Owner of the project (optional)</param>
        /// <param name="_public">Boolean check for public/private projects (optional)</param>
        /// <param name="keyword">A keyword to index the repository by (optional)</param>
        /// <param name="permission">Filter by permission on given resource (optional)</param>
        /// <param name="sortBy">Key to sort the list by (optional)</param>
        /// <param name="sortOrder">The order to sort the list (optional)</param>
        /// <returns>RepositoryList</returns>
        RepositoryList ListPlugins (int? page = default, int? perPage = default, List<string> search = default, List<string> name = default, List<string> owner = default, bool? _public = default, List<string> keyword = default, List<string> permission = default, RepositorySortKey? sortBy = default, SortEnum? sortOrder = default);

        /// <summary>
        /// List plugins
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="search">You know, for search (optional)</param>
        /// <param name="name">The account name (optional)</param>
        /// <param name="owner">Owner of the project (optional)</param>
        /// <param name="_public">Boolean check for public/private projects (optional)</param>
        /// <param name="keyword">A keyword to index the repository by (optional)</param>
        /// <param name="permission">Filter by permission on given resource (optional)</param>
        /// <param name="sortBy">Key to sort the list by (optional)</param>
        /// <param name="sortOrder">The order to sort the list (optional)</param>
        /// <returns>ApiResponse of RepositoryList</returns>
        ApiResponse<RepositoryList> ListPluginsWithHttpInfo (int? page = default, int? perPage = default, List<string> search = default, List<string> name = default, List<string> owner = default, bool? _public = default, List<string> keyword = default, List<string> permission = default, RepositorySortKey? sortBy = default, SortEnum? sortOrder = default);
        /// <summary>
        /// Update a Plugin
        /// </summary>
        /// <remarks>
        /// Update a plugin (must have &#x60;contribute&#x60; permission)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="repositoryUpdate"></param>
        /// <returns>UpdateAccepted</returns>
        UpdateAccepted UpdatePlugin (string owner, string name, RepositoryUpdate repositoryUpdate);

        /// <summary>
        /// Update a Plugin
        /// </summary>
        /// <remarks>
        /// Update a plugin (must have &#x60;contribute&#x60; permission)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="repositoryUpdate"></param>
        /// <returns>ApiResponse of UpdateAccepted</returns>
        ApiResponse<UpdateAccepted> UpdatePluginWithHttpInfo (string owner, string name, RepositoryUpdate repositoryUpdate);
        /// <summary>
        /// Upsert a new permission to a plugin
        /// </summary>
        /// <remarks>
        /// Upsert a plugin&#39;s access policy (must have &#x60;admin&#x60; permission)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="repositoryAccessPolicy"></param>
        /// <returns>UpdateAccepted</returns>
        UpdateAccepted UpsertPluginPermission (string owner, string name, RepositoryAccessPolicy repositoryAccessPolicy);

        /// <summary>
        /// Upsert a new permission to a plugin
        /// </summary>
        /// <remarks>
        /// Upsert a plugin&#39;s access policy (must have &#x60;admin&#x60; permission)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="repositoryAccessPolicy"></param>
        /// <returns>ApiResponse of UpdateAccepted</returns>
        ApiResponse<UpdateAccepted> UpsertPluginPermissionWithHttpInfo (string owner, string name, RepositoryAccessPolicy repositoryAccessPolicy);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a Plugin
        /// </summary>
        /// <remarks>
        /// Create a new plugin.
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="repositoryCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CreatedContent</returns>
        System.Threading.Tasks.Task<CreatedContent> CreatePluginAsync (string owner, RepositoryCreate repositoryCreate, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a Plugin
        /// </summary>
        /// <remarks>
        /// Create a new plugin.
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="repositoryCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CreatedContent)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreatedContent>> CreatePluginWithHttpInfoAsync (string owner, RepositoryCreate repositoryCreate, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create a new Plugin package
        /// </summary>
        /// <remarks>
        /// Create a new plugin package version
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="newPluginPackage"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CreatedContent</returns>
        System.Threading.Tasks.Task<CreatedContent> CreatePluginPackageAsync (string owner, string name, NewPluginPackage newPluginPackage, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a new Plugin package
        /// </summary>
        /// <remarks>
        /// Create a new plugin package version
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="newPluginPackage"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CreatedContent)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreatedContent>> CreatePluginPackageWithHttpInfoAsync (string owner, string name, NewPluginPackage newPluginPackage, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete a Plugin
        /// </summary>
        /// <remarks>
        /// Delete a plugin (must have &#x60;admin&#x60; permission)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeletePluginAsync (string owner, string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete a Plugin
        /// </summary>
        /// <remarks>
        /// Delete a plugin (must have &#x60;admin&#x60; permission)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletePluginWithHttpInfoAsync (string owner, string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Remove a Repository permissions
        /// </summary>
        /// <remarks>
        /// Delete a plugin&#39;s access policy (must have &#x60;admin&#x60; permission)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="repositoryPolicySubject"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeletePluginOrgPermissionAsync (string owner, string name, RepositoryPolicySubject repositoryPolicySubject, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Remove a Repository permissions
        /// </summary>
        /// <remarks>
        /// Delete a plugin&#39;s access policy (must have &#x60;admin&#x60; permission)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="repositoryPolicySubject"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletePluginOrgPermissionWithHttpInfoAsync (string owner, string name, RepositoryPolicySubject repositoryPolicySubject, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get a plugin
        /// </summary>
        /// <remarks>
        /// Retrieve a plugin by name
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Repository</returns>
        System.Threading.Tasks.Task<Repository> GetPluginAsync (string owner, string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a plugin
        /// </summary>
        /// <remarks>
        /// Retrieve a plugin by name
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Repository)</returns>
        System.Threading.Tasks.Task<ApiResponse<Repository>> GetPluginWithHttpInfoAsync (string owner, string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get plugin access permissions
        /// </summary>
        /// <remarks>
        /// Retrieve a plugin&#39;s access permissions (must have &#x60;write&#x60; permission)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="subjectType">The type of access policy subject (optional)</param>
        /// <param name="permission">An access policy permission string (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of RepositoryAccessPolicyList</returns>
        System.Threading.Tasks.Task<RepositoryAccessPolicyList> GetPluginAccessPermissionsAsync (string owner, string name, int? page = default, int? perPage = default, List<string> subjectType = default, List<string> permission = default, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get plugin access permissions
        /// </summary>
        /// <remarks>
        /// Retrieve a plugin&#39;s access permissions (must have &#x60;write&#x60; permission)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="subjectType">The type of access policy subject (optional)</param>
        /// <param name="permission">An access policy permission string (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (RepositoryAccessPolicyList)</returns>
        System.Threading.Tasks.Task<ApiResponse<RepositoryAccessPolicyList>> GetPluginAccessPermissionsWithHttpInfoAsync (string owner, string name, int? page = default, int? perPage = default, List<string> subjectType = default, List<string> permission = default, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get a plugin tag
        /// </summary>
        /// <remarks>
        /// Retrieve a plugin tag by name and tag
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="tag"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PluginPackage</returns>
        System.Threading.Tasks.Task<PluginPackage> GetPluginByTagAsync (string owner, string name, string tag, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a plugin tag
        /// </summary>
        /// <remarks>
        /// Retrieve a plugin tag by name and tag
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="tag"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PluginPackage)</returns>
        System.Threading.Tasks.Task<ApiResponse<PluginPackage>> GetPluginByTagWithHttpInfoAsync (string owner, string name, string tag, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get a plugin tags
        /// </summary>
        /// <remarks>
        /// Retrieve a plugin by name
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PluginPackageList</returns>
        System.Threading.Tasks.Task<PluginPackageList> ListPluginTagsAsync (string owner, string name, int? page = default, int? perPage = default, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a plugin tags
        /// </summary>
        /// <remarks>
        /// Retrieve a plugin by name
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PluginPackageList)</returns>
        System.Threading.Tasks.Task<ApiResponse<PluginPackageList>> ListPluginTagsWithHttpInfoAsync (string owner, string name, int? page = default, int? perPage = default, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List plugins
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="search">You know, for search (optional)</param>
        /// <param name="name">The account name (optional)</param>
        /// <param name="owner">Owner of the project (optional)</param>
        /// <param name="_public">Boolean check for public/private projects (optional)</param>
        /// <param name="keyword">A keyword to index the repository by (optional)</param>
        /// <param name="permission">Filter by permission on given resource (optional)</param>
        /// <param name="sortBy">Key to sort the list by (optional)</param>
        /// <param name="sortOrder">The order to sort the list (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of RepositoryList</returns>
        System.Threading.Tasks.Task<RepositoryList> ListPluginsAsync (int? page = default, int? perPage = default, List<string> search = default, List<string> name = default, List<string> owner = default, bool? _public = default, List<string> keyword = default, List<string> permission = default, RepositorySortKey? sortBy = default, SortEnum? sortOrder = default, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List plugins
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="search">You know, for search (optional)</param>
        /// <param name="name">The account name (optional)</param>
        /// <param name="owner">Owner of the project (optional)</param>
        /// <param name="_public">Boolean check for public/private projects (optional)</param>
        /// <param name="keyword">A keyword to index the repository by (optional)</param>
        /// <param name="permission">Filter by permission on given resource (optional)</param>
        /// <param name="sortBy">Key to sort the list by (optional)</param>
        /// <param name="sortOrder">The order to sort the list (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (RepositoryList)</returns>
        System.Threading.Tasks.Task<ApiResponse<RepositoryList>> ListPluginsWithHttpInfoAsync (int? page = default, int? perPage = default, List<string> search = default, List<string> name = default, List<string> owner = default, bool? _public = default, List<string> keyword = default, List<string> permission = default, RepositorySortKey? sortBy = default, SortEnum? sortOrder = default, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update a Plugin
        /// </summary>
        /// <remarks>
        /// Update a plugin (must have &#x60;contribute&#x60; permission)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="repositoryUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UpdateAccepted</returns>
        System.Threading.Tasks.Task<UpdateAccepted> UpdatePluginAsync (string owner, string name, RepositoryUpdate repositoryUpdate, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update a Plugin
        /// </summary>
        /// <remarks>
        /// Update a plugin (must have &#x60;contribute&#x60; permission)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="repositoryUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UpdateAccepted)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateAccepted>> UpdatePluginWithHttpInfoAsync (string owner, string name, RepositoryUpdate repositoryUpdate, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Upsert a new permission to a plugin
        /// </summary>
        /// <remarks>
        /// Upsert a plugin&#39;s access policy (must have &#x60;admin&#x60; permission)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="repositoryAccessPolicy"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UpdateAccepted</returns>
        System.Threading.Tasks.Task<UpdateAccepted> UpsertPluginPermissionAsync (string owner, string name, RepositoryAccessPolicy repositoryAccessPolicy, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Upsert a new permission to a plugin
        /// </summary>
        /// <remarks>
        /// Upsert a plugin&#39;s access policy (must have &#x60;admin&#x60; permission)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="repositoryAccessPolicy"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UpdateAccepted)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateAccepted>> UpsertPluginPermissionWithHttpInfoAsync (string owner, string name, RepositoryAccessPolicy repositoryAccessPolicy, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PluginsApi : IPluginsApi
    {
        private PollinationSDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PluginsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PluginsApi(String basePath)
        {
            this.Configuration = new PollinationSDK.Client.Configuration { BasePath = basePath };

            ExceptionFactory = PollinationSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PluginsApi"/> class
        /// </summary>
        /// <returns></returns>
        public PluginsApi()
        {
            this.Configuration = PollinationSDK.Client.Configuration.Default;

            ExceptionFactory = PollinationSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PluginsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PluginsApi(PollinationSDK.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = PollinationSDK.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = PollinationSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public PollinationSDK.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public PollinationSDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a Plugin Create a new plugin.
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="repositoryCreate"></param>
        /// <returns>CreatedContent</returns>
        public CreatedContent CreatePlugin (string owner, RepositoryCreate repositoryCreate)
        {
             ApiResponse<CreatedContent> localVarResponse = CreatePluginWithHttpInfo(owner, repositoryCreate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Plugin Create a new plugin.
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="repositoryCreate"></param>
        /// <returns>ApiResponse of CreatedContent</returns>
        public ApiResponse<CreatedContent> CreatePluginWithHttpInfo (string owner, RepositoryCreate repositoryCreate)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling PluginsApi->CreatePlugin");
            // verify the required parameter 'repositoryCreate' is set
            if (repositoryCreate == null)
                throw new ApiException(400, "Missing required parameter 'repositoryCreate' when calling PluginsApi->CreatePlugin");

            var localVarPath = "/plugins/{owner}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repositoryCreate != null && repositoryCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(repositoryCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = repositoryCreate; // byte array
            }

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePlugin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreatedContent>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreatedContent) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreatedContent)));
        }

        /// <summary>
        /// Create a Plugin Create a new plugin.
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="repositoryCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CreatedContent</returns>
        public async System.Threading.Tasks.Task<CreatedContent> CreatePluginAsync (string owner, RepositoryCreate repositoryCreate, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CreatedContent> localVarResponse = await CreatePluginWithHttpInfoAsync(owner, repositoryCreate, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a Plugin Create a new plugin.
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="repositoryCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CreatedContent)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreatedContent>> CreatePluginWithHttpInfoAsync (string owner, RepositoryCreate repositoryCreate, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling PluginsApi->CreatePlugin");
            // verify the required parameter 'repositoryCreate' is set
            if (repositoryCreate == null)
                throw new ApiException(400, "Missing required parameter 'repositoryCreate' when calling PluginsApi->CreatePlugin");

            var localVarPath = "/plugins/{owner}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (repositoryCreate != null && repositoryCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(repositoryCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = repositoryCreate; // byte array
            }

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePlugin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreatedContent>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreatedContent) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreatedContent)));
        }

        /// <summary>
        /// Create a new Plugin package Create a new plugin package version
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="newPluginPackage"></param>
        /// <returns>CreatedContent</returns>
        public CreatedContent CreatePluginPackage (string owner, string name, NewPluginPackage newPluginPackage)
        {
             ApiResponse<CreatedContent> localVarResponse = CreatePluginPackageWithHttpInfo(owner, name, newPluginPackage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Plugin package Create a new plugin package version
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="newPluginPackage"></param>
        /// <returns>ApiResponse of CreatedContent</returns>
        public ApiResponse<CreatedContent> CreatePluginPackageWithHttpInfo (string owner, string name, NewPluginPackage newPluginPackage)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling PluginsApi->CreatePluginPackage");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PluginsApi->CreatePluginPackage");
            // verify the required parameter 'newPluginPackage' is set
            if (newPluginPackage == null)
                throw new ApiException(400, "Missing required parameter 'newPluginPackage' when calling PluginsApi->CreatePluginPackage");

            var localVarPath = "/plugins/{owner}/{name}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (newPluginPackage != null && newPluginPackage.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(newPluginPackage); // http body (model) parameter
            }
            else
            {
                localVarPostBody = newPluginPackage; // byte array
            }

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePluginPackage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreatedContent>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreatedContent) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreatedContent)));
        }

        /// <summary>
        /// Create a new Plugin package Create a new plugin package version
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="newPluginPackage"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CreatedContent</returns>
        public async System.Threading.Tasks.Task<CreatedContent> CreatePluginPackageAsync (string owner, string name, NewPluginPackage newPluginPackage, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CreatedContent> localVarResponse = await CreatePluginPackageWithHttpInfoAsync(owner, name, newPluginPackage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new Plugin package Create a new plugin package version
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="newPluginPackage"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CreatedContent)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreatedContent>> CreatePluginPackageWithHttpInfoAsync (string owner, string name, NewPluginPackage newPluginPackage, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling PluginsApi->CreatePluginPackage");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PluginsApi->CreatePluginPackage");
            // verify the required parameter 'newPluginPackage' is set
            if (newPluginPackage == null)
                throw new ApiException(400, "Missing required parameter 'newPluginPackage' when calling PluginsApi->CreatePluginPackage");

            var localVarPath = "/plugins/{owner}/{name}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (newPluginPackage != null && newPluginPackage.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(newPluginPackage); // http body (model) parameter
            }
            else
            {
                localVarPostBody = newPluginPackage; // byte array
            }

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePluginPackage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreatedContent>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreatedContent) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreatedContent)));
        }

        /// <summary>
        /// Delete a Plugin Delete a plugin (must have &#x60;admin&#x60; permission)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <returns></returns>
        public void DeletePlugin (string owner, string name)
        {
             DeletePluginWithHttpInfo(owner, name);
        }

        /// <summary>
        /// Delete a Plugin Delete a plugin (must have &#x60;admin&#x60; permission)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeletePluginWithHttpInfo (string owner, string name)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling PluginsApi->DeletePlugin");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PluginsApi->DeletePlugin");

            var localVarPath = "/plugins/{owner}/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePlugin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete a Plugin Delete a plugin (must have &#x60;admin&#x60; permission)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeletePluginAsync (string owner, string name, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeletePluginWithHttpInfoAsync(owner, name, cancellationToken);

        }

        /// <summary>
        /// Delete a Plugin Delete a plugin (must have &#x60;admin&#x60; permission)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeletePluginWithHttpInfoAsync (string owner, string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling PluginsApi->DeletePlugin");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PluginsApi->DeletePlugin");

            var localVarPath = "/plugins/{owner}/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePlugin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Remove a Repository permissions Delete a plugin&#39;s access policy (must have &#x60;admin&#x60; permission)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="repositoryPolicySubject"></param>
        /// <returns></returns>
        public void DeletePluginOrgPermission (string owner, string name, RepositoryPolicySubject repositoryPolicySubject)
        {
             DeletePluginOrgPermissionWithHttpInfo(owner, name, repositoryPolicySubject);
        }

        /// <summary>
        /// Remove a Repository permissions Delete a plugin&#39;s access policy (must have &#x60;admin&#x60; permission)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="repositoryPolicySubject"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeletePluginOrgPermissionWithHttpInfo (string owner, string name, RepositoryPolicySubject repositoryPolicySubject)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling PluginsApi->DeletePluginOrgPermission");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PluginsApi->DeletePluginOrgPermission");
            // verify the required parameter 'repositoryPolicySubject' is set
            if (repositoryPolicySubject == null)
                throw new ApiException(400, "Missing required parameter 'repositoryPolicySubject' when calling PluginsApi->DeletePluginOrgPermission");

            var localVarPath = "/plugins/{owner}/{name}/permissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (repositoryPolicySubject != null && repositoryPolicySubject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(repositoryPolicySubject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = repositoryPolicySubject; // byte array
            }

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePluginOrgPermission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Remove a Repository permissions Delete a plugin&#39;s access policy (must have &#x60;admin&#x60; permission)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="repositoryPolicySubject"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeletePluginOrgPermissionAsync (string owner, string name, RepositoryPolicySubject repositoryPolicySubject, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeletePluginOrgPermissionWithHttpInfoAsync(owner, name, repositoryPolicySubject, cancellationToken);

        }

        /// <summary>
        /// Remove a Repository permissions Delete a plugin&#39;s access policy (must have &#x60;admin&#x60; permission)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="repositoryPolicySubject"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeletePluginOrgPermissionWithHttpInfoAsync (string owner, string name, RepositoryPolicySubject repositoryPolicySubject, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling PluginsApi->DeletePluginOrgPermission");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PluginsApi->DeletePluginOrgPermission");
            // verify the required parameter 'repositoryPolicySubject' is set
            if (repositoryPolicySubject == null)
                throw new ApiException(400, "Missing required parameter 'repositoryPolicySubject' when calling PluginsApi->DeletePluginOrgPermission");

            var localVarPath = "/plugins/{owner}/{name}/permissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (repositoryPolicySubject != null && repositoryPolicySubject.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(repositoryPolicySubject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = repositoryPolicySubject; // byte array
            }

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePluginOrgPermission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get a plugin Retrieve a plugin by name
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <returns>Repository</returns>
        public Repository GetPlugin (string owner, string name)
        {
             ApiResponse<Repository> localVarResponse = GetPluginWithHttpInfo(owner, name);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a plugin Retrieve a plugin by name
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <returns>ApiResponse of Repository</returns>
        public ApiResponse<Repository> GetPluginWithHttpInfo (string owner, string name)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling PluginsApi->GetPlugin");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PluginsApi->GetPlugin");

            var localVarPath = "/plugins/{owner}/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlugin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Repository>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Repository) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Repository)));
        }

        /// <summary>
        /// Get a plugin Retrieve a plugin by name
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Repository</returns>
        public async System.Threading.Tasks.Task<Repository> GetPluginAsync (string owner, string name, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Repository> localVarResponse = await GetPluginWithHttpInfoAsync(owner, name, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a plugin Retrieve a plugin by name
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Repository)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Repository>> GetPluginWithHttpInfoAsync (string owner, string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling PluginsApi->GetPlugin");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PluginsApi->GetPlugin");

            var localVarPath = "/plugins/{owner}/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPlugin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Repository>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Repository) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Repository)));
        }

        /// <summary>
        /// Get plugin access permissions Retrieve a plugin&#39;s access permissions (must have &#x60;write&#x60; permission)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="subjectType">The type of access policy subject (optional)</param>
        /// <param name="permission">An access policy permission string (optional)</param>
        /// <returns>RepositoryAccessPolicyList</returns>
        public RepositoryAccessPolicyList GetPluginAccessPermissions (string owner, string name, int? page = default, int? perPage = default, List<string> subjectType = default, List<string> permission = default)
        {
             ApiResponse<RepositoryAccessPolicyList> localVarResponse = GetPluginAccessPermissionsWithHttpInfo(owner, name, page, perPage, subjectType, permission);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get plugin access permissions Retrieve a plugin&#39;s access permissions (must have &#x60;write&#x60; permission)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="subjectType">The type of access policy subject (optional)</param>
        /// <param name="permission">An access policy permission string (optional)</param>
        /// <returns>ApiResponse of RepositoryAccessPolicyList</returns>
        public ApiResponse<RepositoryAccessPolicyList> GetPluginAccessPermissionsWithHttpInfo (string owner, string name, int? page = default, int? perPage = default, List<string> subjectType = default, List<string> permission = default)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling PluginsApi->GetPluginAccessPermissions");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PluginsApi->GetPluginAccessPermissions");

            var localVarPath = "/plugins/{owner}/{name}/permissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per-page", perPage)); // query parameter
            if (subjectType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "subject_type", subjectType)); // query parameter
            if (permission != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "permission", permission)); // query parameter

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPluginAccessPermissions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RepositoryAccessPolicyList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RepositoryAccessPolicyList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RepositoryAccessPolicyList)));
        }

        /// <summary>
        /// Get plugin access permissions Retrieve a plugin&#39;s access permissions (must have &#x60;write&#x60; permission)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="subjectType">The type of access policy subject (optional)</param>
        /// <param name="permission">An access policy permission string (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of RepositoryAccessPolicyList</returns>
        public async System.Threading.Tasks.Task<RepositoryAccessPolicyList> GetPluginAccessPermissionsAsync (string owner, string name, int? page = default, int? perPage = default, List<string> subjectType = default, List<string> permission = default, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<RepositoryAccessPolicyList> localVarResponse = await GetPluginAccessPermissionsWithHttpInfoAsync(owner, name, page, perPage, subjectType, permission, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get plugin access permissions Retrieve a plugin&#39;s access permissions (must have &#x60;write&#x60; permission)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="subjectType">The type of access policy subject (optional)</param>
        /// <param name="permission">An access policy permission string (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (RepositoryAccessPolicyList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RepositoryAccessPolicyList>> GetPluginAccessPermissionsWithHttpInfoAsync (string owner, string name, int? page = default, int? perPage = default, List<string> subjectType = default, List<string> permission = default, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling PluginsApi->GetPluginAccessPermissions");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PluginsApi->GetPluginAccessPermissions");

            var localVarPath = "/plugins/{owner}/{name}/permissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per-page", perPage)); // query parameter
            if (subjectType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "subject_type", subjectType)); // query parameter
            if (permission != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "permission", permission)); // query parameter

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPluginAccessPermissions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RepositoryAccessPolicyList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RepositoryAccessPolicyList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RepositoryAccessPolicyList)));
        }

        /// <summary>
        /// Get a plugin tag Retrieve a plugin tag by name and tag
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="tag"></param>
        /// <returns>PluginPackage</returns>
        public PluginPackage GetPluginByTag (string owner, string name, string tag)
        {
             ApiResponse<PluginPackage> localVarResponse = GetPluginByTagWithHttpInfo(owner, name, tag);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a plugin tag Retrieve a plugin tag by name and tag
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="tag"></param>
        /// <returns>ApiResponse of PluginPackage</returns>
        public ApiResponse<PluginPackage> GetPluginByTagWithHttpInfo (string owner, string name, string tag)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling PluginsApi->GetPluginByTag");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PluginsApi->GetPluginByTag");
            // verify the required parameter 'tag' is set
            if (tag == null)
                throw new ApiException(400, "Missing required parameter 'tag' when calling PluginsApi->GetPluginByTag");

            var localVarPath = "/plugins/{owner}/{name}/tags/{tag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (tag != null) localVarPathParams.Add("tag", this.Configuration.ApiClient.ParameterToString(tag)); // path parameter

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPluginByTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PluginPackage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PluginPackage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PluginPackage)));
        }

        /// <summary>
        /// Get a plugin tag Retrieve a plugin tag by name and tag
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="tag"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PluginPackage</returns>
        public async System.Threading.Tasks.Task<PluginPackage> GetPluginByTagAsync (string owner, string name, string tag, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<PluginPackage> localVarResponse = await GetPluginByTagWithHttpInfoAsync(owner, name, tag, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a plugin tag Retrieve a plugin tag by name and tag
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="tag"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PluginPackage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PluginPackage>> GetPluginByTagWithHttpInfoAsync (string owner, string name, string tag, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling PluginsApi->GetPluginByTag");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PluginsApi->GetPluginByTag");
            // verify the required parameter 'tag' is set
            if (tag == null)
                throw new ApiException(400, "Missing required parameter 'tag' when calling PluginsApi->GetPluginByTag");

            var localVarPath = "/plugins/{owner}/{name}/tags/{tag}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (tag != null) localVarPathParams.Add("tag", this.Configuration.ApiClient.ParameterToString(tag)); // path parameter

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPluginByTag", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PluginPackage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PluginPackage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PluginPackage)));
        }

        /// <summary>
        /// Get a plugin tags Retrieve a plugin by name
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <returns>PluginPackageList</returns>
        public PluginPackageList ListPluginTags (string owner, string name, int? page = default, int? perPage = default)
        {
             ApiResponse<PluginPackageList> localVarResponse = ListPluginTagsWithHttpInfo(owner, name, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a plugin tags Retrieve a plugin by name
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <returns>ApiResponse of PluginPackageList</returns>
        public ApiResponse<PluginPackageList> ListPluginTagsWithHttpInfo (string owner, string name, int? page = default, int? perPage = default)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling PluginsApi->ListPluginTags");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PluginsApi->ListPluginTags");

            var localVarPath = "/plugins/{owner}/{name}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per-page", perPage)); // query parameter

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListPluginTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PluginPackageList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PluginPackageList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PluginPackageList)));
        }

        /// <summary>
        /// Get a plugin tags Retrieve a plugin by name
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of PluginPackageList</returns>
        public async System.Threading.Tasks.Task<PluginPackageList> ListPluginTagsAsync (string owner, string name, int? page = default, int? perPage = default, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<PluginPackageList> localVarResponse = await ListPluginTagsWithHttpInfoAsync(owner, name, page, perPage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a plugin tags Retrieve a plugin by name
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (PluginPackageList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PluginPackageList>> ListPluginTagsWithHttpInfoAsync (string owner, string name, int? page = default, int? perPage = default, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling PluginsApi->ListPluginTags");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PluginsApi->ListPluginTags");

            var localVarPath = "/plugins/{owner}/{name}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per-page", perPage)); // query parameter

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListPluginTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PluginPackageList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PluginPackageList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PluginPackageList)));
        }

        /// <summary>
        /// List plugins 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="search">You know, for search (optional)</param>
        /// <param name="name">The account name (optional)</param>
        /// <param name="owner">Owner of the project (optional)</param>
        /// <param name="_public">Boolean check for public/private projects (optional)</param>
        /// <param name="keyword">A keyword to index the repository by (optional)</param>
        /// <param name="permission">Filter by permission on given resource (optional)</param>
        /// <param name="sortBy">Key to sort the list by (optional)</param>
        /// <param name="sortOrder">The order to sort the list (optional)</param>
        /// <returns>RepositoryList</returns>
        public RepositoryList ListPlugins (int? page = default, int? perPage = default, List<string> search = default, List<string> name = default, List<string> owner = default, bool? _public = default, List<string> keyword = default, List<string> permission = default, RepositorySortKey? sortBy = default, SortEnum? sortOrder = default)
        {
             ApiResponse<RepositoryList> localVarResponse = ListPluginsWithHttpInfo(page, perPage, search, name, owner, _public, keyword, permission, sortBy, sortOrder);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List plugins 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="search">You know, for search (optional)</param>
        /// <param name="name">The account name (optional)</param>
        /// <param name="owner">Owner of the project (optional)</param>
        /// <param name="_public">Boolean check for public/private projects (optional)</param>
        /// <param name="keyword">A keyword to index the repository by (optional)</param>
        /// <param name="permission">Filter by permission on given resource (optional)</param>
        /// <param name="sortBy">Key to sort the list by (optional)</param>
        /// <param name="sortOrder">The order to sort the list (optional)</param>
        /// <returns>ApiResponse of RepositoryList</returns>
        public ApiResponse<RepositoryList> ListPluginsWithHttpInfo (int? page = default, int? perPage = default, List<string> search = default, List<string> name = default, List<string> owner = default, bool? _public = default, List<string> keyword = default, List<string> permission = default, RepositorySortKey? sortBy = default, SortEnum? sortOrder = default)
        {

            var localVarPath = "/plugins";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per-page", perPage)); // query parameter
            if (search != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "search", search)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "name", name)); // query parameter
            if (owner != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "owner", owner)); // query parameter
            if (_public != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "public", _public)); // query parameter
            if (keyword != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "keyword", keyword)); // query parameter
            if (permission != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "permission", permission)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_by", sortBy)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_order", sortOrder)); // query parameter

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListPlugins", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RepositoryList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RepositoryList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RepositoryList)));
        }

        /// <summary>
        /// List plugins 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="search">You know, for search (optional)</param>
        /// <param name="name">The account name (optional)</param>
        /// <param name="owner">Owner of the project (optional)</param>
        /// <param name="_public">Boolean check for public/private projects (optional)</param>
        /// <param name="keyword">A keyword to index the repository by (optional)</param>
        /// <param name="permission">Filter by permission on given resource (optional)</param>
        /// <param name="sortBy">Key to sort the list by (optional)</param>
        /// <param name="sortOrder">The order to sort the list (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of RepositoryList</returns>
        public async System.Threading.Tasks.Task<RepositoryList> ListPluginsAsync (int? page = default, int? perPage = default, List<string> search = default, List<string> name = default, List<string> owner = default, bool? _public = default, List<string> keyword = default, List<string> permission = default, RepositorySortKey? sortBy = default, SortEnum? sortOrder = default, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<RepositoryList> localVarResponse = await ListPluginsWithHttpInfoAsync(page, perPage, search, name, owner, _public, keyword, permission, sortBy, sortOrder, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List plugins 
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="search">You know, for search (optional)</param>
        /// <param name="name">The account name (optional)</param>
        /// <param name="owner">Owner of the project (optional)</param>
        /// <param name="_public">Boolean check for public/private projects (optional)</param>
        /// <param name="keyword">A keyword to index the repository by (optional)</param>
        /// <param name="permission">Filter by permission on given resource (optional)</param>
        /// <param name="sortBy">Key to sort the list by (optional)</param>
        /// <param name="sortOrder">The order to sort the list (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (RepositoryList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RepositoryList>> ListPluginsWithHttpInfoAsync (int? page = default, int? perPage = default, List<string> search = default, List<string> name = default, List<string> owner = default, bool? _public = default, List<string> keyword = default, List<string> permission = default, RepositorySortKey? sortBy = default, SortEnum? sortOrder = default, CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/plugins";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per-page", perPage)); // query parameter
            if (search != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "search", search)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "name", name)); // query parameter
            if (owner != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "owner", owner)); // query parameter
            if (_public != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "public", _public)); // query parameter
            if (keyword != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "keyword", keyword)); // query parameter
            if (permission != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "permission", permission)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_by", sortBy)); // query parameter
            if (sortOrder != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_order", sortOrder)); // query parameter

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListPlugins", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RepositoryList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (RepositoryList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RepositoryList)));
        }

        /// <summary>
        /// Update a Plugin Update a plugin (must have &#x60;contribute&#x60; permission)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="repositoryUpdate"></param>
        /// <returns>UpdateAccepted</returns>
        public UpdateAccepted UpdatePlugin (string owner, string name, RepositoryUpdate repositoryUpdate)
        {
             ApiResponse<UpdateAccepted> localVarResponse = UpdatePluginWithHttpInfo(owner, name, repositoryUpdate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Plugin Update a plugin (must have &#x60;contribute&#x60; permission)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="repositoryUpdate"></param>
        /// <returns>ApiResponse of UpdateAccepted</returns>
        public ApiResponse<UpdateAccepted> UpdatePluginWithHttpInfo (string owner, string name, RepositoryUpdate repositoryUpdate)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling PluginsApi->UpdatePlugin");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PluginsApi->UpdatePlugin");
            // verify the required parameter 'repositoryUpdate' is set
            if (repositoryUpdate == null)
                throw new ApiException(400, "Missing required parameter 'repositoryUpdate' when calling PluginsApi->UpdatePlugin");

            var localVarPath = "/plugins/{owner}/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (repositoryUpdate != null && repositoryUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(repositoryUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = repositoryUpdate; // byte array
            }

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePlugin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateAccepted>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdateAccepted) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateAccepted)));
        }

        /// <summary>
        /// Update a Plugin Update a plugin (must have &#x60;contribute&#x60; permission)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="repositoryUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UpdateAccepted</returns>
        public async System.Threading.Tasks.Task<UpdateAccepted> UpdatePluginAsync (string owner, string name, RepositoryUpdate repositoryUpdate, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<UpdateAccepted> localVarResponse = await UpdatePluginWithHttpInfoAsync(owner, name, repositoryUpdate, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a Plugin Update a plugin (must have &#x60;contribute&#x60; permission)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="repositoryUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UpdateAccepted)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateAccepted>> UpdatePluginWithHttpInfoAsync (string owner, string name, RepositoryUpdate repositoryUpdate, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling PluginsApi->UpdatePlugin");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PluginsApi->UpdatePlugin");
            // verify the required parameter 'repositoryUpdate' is set
            if (repositoryUpdate == null)
                throw new ApiException(400, "Missing required parameter 'repositoryUpdate' when calling PluginsApi->UpdatePlugin");

            var localVarPath = "/plugins/{owner}/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (repositoryUpdate != null && repositoryUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(repositoryUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = repositoryUpdate; // byte array
            }

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePlugin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateAccepted>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdateAccepted) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateAccepted)));
        }

        /// <summary>
        /// Upsert a new permission to a plugin Upsert a plugin&#39;s access policy (must have &#x60;admin&#x60; permission)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="repositoryAccessPolicy"></param>
        /// <returns>UpdateAccepted</returns>
        public UpdateAccepted UpsertPluginPermission (string owner, string name, RepositoryAccessPolicy repositoryAccessPolicy)
        {
             ApiResponse<UpdateAccepted> localVarResponse = UpsertPluginPermissionWithHttpInfo(owner, name, repositoryAccessPolicy);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upsert a new permission to a plugin Upsert a plugin&#39;s access policy (must have &#x60;admin&#x60; permission)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="repositoryAccessPolicy"></param>
        /// <returns>ApiResponse of UpdateAccepted</returns>
        public ApiResponse<UpdateAccepted> UpsertPluginPermissionWithHttpInfo (string owner, string name, RepositoryAccessPolicy repositoryAccessPolicy)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling PluginsApi->UpsertPluginPermission");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PluginsApi->UpsertPluginPermission");
            // verify the required parameter 'repositoryAccessPolicy' is set
            if (repositoryAccessPolicy == null)
                throw new ApiException(400, "Missing required parameter 'repositoryAccessPolicy' when calling PluginsApi->UpsertPluginPermission");

            var localVarPath = "/plugins/{owner}/{name}/permissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (repositoryAccessPolicy != null && repositoryAccessPolicy.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(repositoryAccessPolicy); // http body (model) parameter
            }
            else
            {
                localVarPostBody = repositoryAccessPolicy; // byte array
            }

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpsertPluginPermission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateAccepted>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdateAccepted) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateAccepted)));
        }

        /// <summary>
        /// Upsert a new permission to a plugin Upsert a plugin&#39;s access policy (must have &#x60;admin&#x60; permission)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="repositoryAccessPolicy"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UpdateAccepted</returns>
        public async System.Threading.Tasks.Task<UpdateAccepted> UpsertPluginPermissionAsync (string owner, string name, RepositoryAccessPolicy repositoryAccessPolicy, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<UpdateAccepted> localVarResponse = await UpsertPluginPermissionWithHttpInfoAsync(owner, name, repositoryAccessPolicy, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Upsert a new permission to a plugin Upsert a plugin&#39;s access policy (must have &#x60;admin&#x60; permission)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="repositoryAccessPolicy"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UpdateAccepted)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateAccepted>> UpsertPluginPermissionWithHttpInfoAsync (string owner, string name, RepositoryAccessPolicy repositoryAccessPolicy, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling PluginsApi->UpsertPluginPermission");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling PluginsApi->UpsertPluginPermission");
            // verify the required parameter 'repositoryAccessPolicy' is set
            if (repositoryAccessPolicy == null)
                throw new ApiException(400, "Missing required parameter 'repositoryAccessPolicy' when calling PluginsApi->UpsertPluginPermission");

            var localVarPath = "/plugins/{owner}/{name}/permissions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (repositoryAccessPolicy != null && repositoryAccessPolicy.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(repositoryAccessPolicy); // http body (model) parameter
            }
            else
            {
                localVarPostBody = repositoryAccessPolicy; // byte array
            }

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpsertPluginPermission", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateAccepted>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdateAccepted) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateAccepted)));
        }

    }
}
