/* 
 * pollination-server
 *
 * Pollination Server OpenAPI Definition
 *
 * The version of the OpenAPI document: 0.15.0
 * Contact: info@pollination.cloud
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using PollinationSDK.Client;
using PollinationSDK.Model;

namespace PollinationSDK.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrgsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create an Org
        /// </summary>
        /// <remarks>
        /// Create a new org.
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationCreate"></param>
        /// <returns>CreatedContent</returns>
        CreatedContent CreateOrg (OrganizationCreate organizationCreate);

        /// <summary>
        /// Create an Org
        /// </summary>
        /// <remarks>
        /// Create a new org.
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationCreate"></param>
        /// <returns>ApiResponse of CreatedContent</returns>
        ApiResponse<CreatedContent> CreateOrgWithHttpInfo (OrganizationCreate organizationCreate);
        /// <summary>
        /// Delete an Org
        /// </summary>
        /// <remarks>
        /// Delete a org (must have &#x60;admin&#x60; permission)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns></returns>
        void DeleteOrg (string name);

        /// <summary>
        /// Delete an Org
        /// </summary>
        /// <remarks>
        /// Delete a org (must have &#x60;admin&#x60; permission)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteOrgWithHttpInfo (string name);
        /// <summary>
        /// Remove an Org member
        /// </summary>
        /// <remarks>
        /// Remove a member from the org (must have org &#x60;owner&#x60; role)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="username"></param>
        /// <returns></returns>
        void DeleteOrgMember (string name, string username);

        /// <summary>
        /// Remove an Org member
        /// </summary>
        /// <remarks>
        /// Remove a member from the org (must have org &#x60;owner&#x60; role)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="username"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteOrgMemberWithHttpInfo (string name, string username);
        /// <summary>
        /// Get an Org
        /// </summary>
        /// <remarks>
        /// Retrieve a org by name
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>Organization</returns>
        Organization GetOrg (string name);

        /// <summary>
        /// Get an Org
        /// </summary>
        /// <remarks>
        /// Retrieve a org by name
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>ApiResponse of Organization</returns>
        ApiResponse<Organization> GetOrgWithHttpInfo (string name);
        /// <summary>
        /// List organization members
        /// </summary>
        /// <remarks>
        /// Retrieve a org&#39;s members
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>OrganizationMemberList</returns>
        OrganizationMemberList GetOrgMembers (string name);

        /// <summary>
        /// List organization members
        /// </summary>
        /// <remarks>
        /// Retrieve a org&#39;s members
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>ApiResponse of OrganizationMemberList</returns>
        ApiResponse<OrganizationMemberList> GetOrgMembersWithHttpInfo (string name);
        /// <summary>
        /// List Orgs
        /// </summary>
        /// <remarks>
        /// search for orgs using query parameters
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">You know, for search (optional)</param>
        /// <param name="name">The account name (optional)</param>
        /// <param name="member">The username of a user (optional)</param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <returns>OrganizationList</returns>
        OrganizationList ListOrgs (List<string> search = default, List<string> name = default, List<string> member = default, int? page = default, int? perPage = default);

        /// <summary>
        /// List Orgs
        /// </summary>
        /// <remarks>
        /// search for orgs using query parameters
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">You know, for search (optional)</param>
        /// <param name="name">The account name (optional)</param>
        /// <param name="member">The username of a user (optional)</param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <returns>ApiResponse of OrganizationList</returns>
        ApiResponse<OrganizationList> ListOrgsWithHttpInfo (List<string> search = default, List<string> name = default, List<string> member = default, int? page = default, int? perPage = default);
        /// <summary>
        /// Update an Org
        /// </summary>
        /// <remarks>
        /// Update a org (must have org &#x60;owner&#x60; role)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="organizationUpdate"></param>
        /// <returns>UpdateAccepted</returns>
        UpdateAccepted UpdateOrg (string name, OrganizationUpdate organizationUpdate);

        /// <summary>
        /// Update an Org
        /// </summary>
        /// <remarks>
        /// Update a org (must have org &#x60;owner&#x60; role)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="organizationUpdate"></param>
        /// <returns>ApiResponse of UpdateAccepted</returns>
        ApiResponse<UpdateAccepted> UpdateOrgWithHttpInfo (string name, OrganizationUpdate organizationUpdate);
        /// <summary>
        /// Add or update the role of an Org Member
        /// </summary>
        /// <remarks>
        /// Upsert a member role to the org (must have org &#x60;owner&#x60; role)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="username"></param>
        /// <param name="role"></param>
        /// <returns>UpdateAccepted</returns>
        UpdateAccepted UpsertOrgMember (string name, string username, OrganizationRoleEnum role);

        /// <summary>
        /// Add or update the role of an Org Member
        /// </summary>
        /// <remarks>
        /// Upsert a member role to the org (must have org &#x60;owner&#x60; role)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="username"></param>
        /// <param name="role"></param>
        /// <returns>ApiResponse of UpdateAccepted</returns>
        ApiResponse<UpdateAccepted> UpsertOrgMemberWithHttpInfo (string name, string username, OrganizationRoleEnum role);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create an Org
        /// </summary>
        /// <remarks>
        /// Create a new org.
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CreatedContent</returns>
        System.Threading.Tasks.Task<CreatedContent> CreateOrgAsync (OrganizationCreate organizationCreate, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create an Org
        /// </summary>
        /// <remarks>
        /// Create a new org.
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CreatedContent)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreatedContent>> CreateOrgWithHttpInfoAsync (OrganizationCreate organizationCreate, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Delete an Org
        /// </summary>
        /// <remarks>
        /// Delete a org (must have &#x60;admin&#x60; permission)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteOrgAsync (string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete an Org
        /// </summary>
        /// <remarks>
        /// Delete a org (must have &#x60;admin&#x60; permission)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOrgWithHttpInfoAsync (string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Remove an Org member
        /// </summary>
        /// <remarks>
        /// Remove a member from the org (must have org &#x60;owner&#x60; role)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="username"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteOrgMemberAsync (string name, string username, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Remove an Org member
        /// </summary>
        /// <remarks>
        /// Remove a member from the org (must have org &#x60;owner&#x60; role)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="username"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOrgMemberWithHttpInfoAsync (string name, string username, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get an Org
        /// </summary>
        /// <remarks>
        /// Retrieve a org by name
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Organization</returns>
        System.Threading.Tasks.Task<Organization> GetOrgAsync (string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get an Org
        /// </summary>
        /// <remarks>
        /// Retrieve a org by name
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Organization)</returns>
        System.Threading.Tasks.Task<ApiResponse<Organization>> GetOrgWithHttpInfoAsync (string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List organization members
        /// </summary>
        /// <remarks>
        /// Retrieve a org&#39;s members
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OrganizationMemberList</returns>
        System.Threading.Tasks.Task<OrganizationMemberList> GetOrgMembersAsync (string name, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List organization members
        /// </summary>
        /// <remarks>
        /// Retrieve a org&#39;s members
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OrganizationMemberList)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrganizationMemberList>> GetOrgMembersWithHttpInfoAsync (string name, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List Orgs
        /// </summary>
        /// <remarks>
        /// search for orgs using query parameters
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">You know, for search (optional)</param>
        /// <param name="name">The account name (optional)</param>
        /// <param name="member">The username of a user (optional)</param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OrganizationList</returns>
        System.Threading.Tasks.Task<OrganizationList> ListOrgsAsync (List<string> search = default, List<string> name = default, List<string> member = default, int? page = default, int? perPage = default, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List Orgs
        /// </summary>
        /// <remarks>
        /// search for orgs using query parameters
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">You know, for search (optional)</param>
        /// <param name="name">The account name (optional)</param>
        /// <param name="member">The username of a user (optional)</param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OrganizationList)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrganizationList>> ListOrgsWithHttpInfoAsync (List<string> search = default, List<string> name = default, List<string> member = default, int? page = default, int? perPage = default, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Update an Org
        /// </summary>
        /// <remarks>
        /// Update a org (must have org &#x60;owner&#x60; role)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="organizationUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UpdateAccepted</returns>
        System.Threading.Tasks.Task<UpdateAccepted> UpdateOrgAsync (string name, OrganizationUpdate organizationUpdate, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update an Org
        /// </summary>
        /// <remarks>
        /// Update a org (must have org &#x60;owner&#x60; role)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="organizationUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UpdateAccepted)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateAccepted>> UpdateOrgWithHttpInfoAsync (string name, OrganizationUpdate organizationUpdate, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Add or update the role of an Org Member
        /// </summary>
        /// <remarks>
        /// Upsert a member role to the org (must have org &#x60;owner&#x60; role)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="username"></param>
        /// <param name="role"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UpdateAccepted</returns>
        System.Threading.Tasks.Task<UpdateAccepted> UpsertOrgMemberAsync (string name, string username, OrganizationRoleEnum role, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Add or update the role of an Org Member
        /// </summary>
        /// <remarks>
        /// Upsert a member role to the org (must have org &#x60;owner&#x60; role)
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="username"></param>
        /// <param name="role"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UpdateAccepted)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateAccepted>> UpsertOrgMemberWithHttpInfoAsync (string name, string username, OrganizationRoleEnum role, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OrgsApi : IOrgsApi
    {
        private PollinationSDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OrgsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrgsApi(String basePath)
        {
            this.Configuration = new PollinationSDK.Client.Configuration { BasePath = basePath };

            ExceptionFactory = PollinationSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrgsApi"/> class
        /// </summary>
        /// <returns></returns>
        public OrgsApi()
        {
            this.Configuration = PollinationSDK.Client.Configuration.Default;

            ExceptionFactory = PollinationSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrgsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OrgsApi(PollinationSDK.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = PollinationSDK.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = PollinationSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public PollinationSDK.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public PollinationSDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create an Org Create a new org.
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationCreate"></param>
        /// <returns>CreatedContent</returns>
        public CreatedContent CreateOrg (OrganizationCreate organizationCreate)
        {
             ApiResponse<CreatedContent> localVarResponse = CreateOrgWithHttpInfo(organizationCreate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an Org Create a new org.
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationCreate"></param>
        /// <returns>ApiResponse of CreatedContent</returns>
        public ApiResponse<CreatedContent> CreateOrgWithHttpInfo (OrganizationCreate organizationCreate)
        {
            // verify the required parameter 'organizationCreate' is set
            if (organizationCreate == null)
                throw new ApiException(400, "Missing required parameter 'organizationCreate' when calling OrgsApi->CreateOrg");

            var localVarPath = "/orgs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationCreate != null && organizationCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(organizationCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = organizationCreate; // byte array
            }

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateOrg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreatedContent>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreatedContent) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreatedContent)));
        }

        /// <summary>
        /// Create an Org Create a new org.
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CreatedContent</returns>
        public async System.Threading.Tasks.Task<CreatedContent> CreateOrgAsync (OrganizationCreate organizationCreate, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CreatedContent> localVarResponse = await CreateOrgWithHttpInfoAsync(organizationCreate, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an Org Create a new org.
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organizationCreate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CreatedContent)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreatedContent>> CreateOrgWithHttpInfoAsync (OrganizationCreate organizationCreate, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'organizationCreate' is set
            if (organizationCreate == null)
                throw new ApiException(400, "Missing required parameter 'organizationCreate' when calling OrgsApi->CreateOrg");

            var localVarPath = "/orgs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organizationCreate != null && organizationCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(organizationCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = organizationCreate; // byte array
            }

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateOrg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreatedContent>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreatedContent) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreatedContent)));
        }

        /// <summary>
        /// Delete an Org Delete a org (must have &#x60;admin&#x60; permission)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns></returns>
        public void DeleteOrg (string name)
        {
             DeleteOrgWithHttpInfo(name);
        }

        /// <summary>
        /// Delete an Org Delete a org (must have &#x60;admin&#x60; permission)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteOrgWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling OrgsApi->DeleteOrg");

            var localVarPath = "/orgs/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOrg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete an Org Delete a org (must have &#x60;admin&#x60; permission)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteOrgAsync (string name, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteOrgWithHttpInfoAsync(name, cancellationToken);

        }

        /// <summary>
        /// Delete an Org Delete a org (must have &#x60;admin&#x60; permission)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOrgWithHttpInfoAsync (string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling OrgsApi->DeleteOrg");

            var localVarPath = "/orgs/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOrg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Remove an Org member Remove a member from the org (must have org &#x60;owner&#x60; role)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="username"></param>
        /// <returns></returns>
        public void DeleteOrgMember (string name, string username)
        {
             DeleteOrgMemberWithHttpInfo(name, username);
        }

        /// <summary>
        /// Remove an Org member Remove a member from the org (must have org &#x60;owner&#x60; role)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="username"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteOrgMemberWithHttpInfo (string name, string username)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling OrgsApi->DeleteOrgMember");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling OrgsApi->DeleteOrgMember");

            var localVarPath = "/orgs/{name}/members/{username}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (username != null) localVarPathParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOrgMember", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Remove an Org member Remove a member from the org (must have org &#x60;owner&#x60; role)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="username"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteOrgMemberAsync (string name, string username, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteOrgMemberWithHttpInfoAsync(name, username, cancellationToken);

        }

        /// <summary>
        /// Remove an Org member Remove a member from the org (must have org &#x60;owner&#x60; role)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="username"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOrgMemberWithHttpInfoAsync (string name, string username, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling OrgsApi->DeleteOrgMember");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling OrgsApi->DeleteOrgMember");

            var localVarPath = "/orgs/{name}/members/{username}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (username != null) localVarPathParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteOrgMember", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get an Org Retrieve a org by name
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>Organization</returns>
        public Organization GetOrg (string name)
        {
             ApiResponse<Organization> localVarResponse = GetOrgWithHttpInfo(name);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an Org Retrieve a org by name
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>ApiResponse of Organization</returns>
        public ApiResponse<Organization> GetOrgWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling OrgsApi->GetOrg");

            var localVarPath = "/orgs/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Organization>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Organization) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Organization)));
        }

        /// <summary>
        /// Get an Org Retrieve a org by name
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Organization</returns>
        public async System.Threading.Tasks.Task<Organization> GetOrgAsync (string name, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Organization> localVarResponse = await GetOrgWithHttpInfoAsync(name, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an Org Retrieve a org by name
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Organization)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Organization>> GetOrgWithHttpInfoAsync (string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling OrgsApi->GetOrg");

            var localVarPath = "/orgs/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Organization>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Organization) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Organization)));
        }

        /// <summary>
        /// List organization members Retrieve a org&#39;s members
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>OrganizationMemberList</returns>
        public OrganizationMemberList GetOrgMembers (string name)
        {
             ApiResponse<OrganizationMemberList> localVarResponse = GetOrgMembersWithHttpInfo(name);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List organization members Retrieve a org&#39;s members
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <returns>ApiResponse of OrganizationMemberList</returns>
        public ApiResponse<OrganizationMemberList> GetOrgMembersWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling OrgsApi->GetOrgMembers");

            var localVarPath = "/orgs/{name}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrgMembers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrganizationMemberList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OrganizationMemberList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrganizationMemberList)));
        }

        /// <summary>
        /// List organization members Retrieve a org&#39;s members
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OrganizationMemberList</returns>
        public async System.Threading.Tasks.Task<OrganizationMemberList> GetOrgMembersAsync (string name, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<OrganizationMemberList> localVarResponse = await GetOrgMembersWithHttpInfoAsync(name, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List organization members Retrieve a org&#39;s members
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OrganizationMemberList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrganizationMemberList>> GetOrgMembersWithHttpInfoAsync (string name, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling OrgsApi->GetOrgMembers");

            var localVarPath = "/orgs/{name}/members";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrgMembers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrganizationMemberList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OrganizationMemberList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrganizationMemberList)));
        }

        /// <summary>
        /// List Orgs search for orgs using query parameters
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">You know, for search (optional)</param>
        /// <param name="name">The account name (optional)</param>
        /// <param name="member">The username of a user (optional)</param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <returns>OrganizationList</returns>
        public OrganizationList ListOrgs (List<string> search = default, List<string> name = default, List<string> member = default, int? page = default, int? perPage = default)
        {
             ApiResponse<OrganizationList> localVarResponse = ListOrgsWithHttpInfo(search, name, member, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Orgs search for orgs using query parameters
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">You know, for search (optional)</param>
        /// <param name="name">The account name (optional)</param>
        /// <param name="member">The username of a user (optional)</param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <returns>ApiResponse of OrganizationList</returns>
        public ApiResponse<OrganizationList> ListOrgsWithHttpInfo (List<string> search = default, List<string> name = default, List<string> member = default, int? page = default, int? perPage = default)
        {

            var localVarPath = "/orgs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (search != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "search", search)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "name", name)); // query parameter
            if (member != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "member", member)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per-page", perPage)); // query parameter

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListOrgs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrganizationList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OrganizationList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrganizationList)));
        }

        /// <summary>
        /// List Orgs search for orgs using query parameters
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">You know, for search (optional)</param>
        /// <param name="name">The account name (optional)</param>
        /// <param name="member">The username of a user (optional)</param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of OrganizationList</returns>
        public async System.Threading.Tasks.Task<OrganizationList> ListOrgsAsync (List<string> search = default, List<string> name = default, List<string> member = default, int? page = default, int? perPage = default, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<OrganizationList> localVarResponse = await ListOrgsWithHttpInfoAsync(search, name, member, page, perPage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Orgs search for orgs using query parameters
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="search">You know, for search (optional)</param>
        /// <param name="name">The account name (optional)</param>
        /// <param name="member">The username of a user (optional)</param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (OrganizationList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OrganizationList>> ListOrgsWithHttpInfoAsync (List<string> search = default, List<string> name = default, List<string> member = default, int? page = default, int? perPage = default, CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/orgs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (search != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "search", search)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "name", name)); // query parameter
            if (member != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "member", member)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per-page", perPage)); // query parameter

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListOrgs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OrganizationList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OrganizationList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OrganizationList)));
        }

        /// <summary>
        /// Update an Org Update a org (must have org &#x60;owner&#x60; role)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="organizationUpdate"></param>
        /// <returns>UpdateAccepted</returns>
        public UpdateAccepted UpdateOrg (string name, OrganizationUpdate organizationUpdate)
        {
             ApiResponse<UpdateAccepted> localVarResponse = UpdateOrgWithHttpInfo(name, organizationUpdate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an Org Update a org (must have org &#x60;owner&#x60; role)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="organizationUpdate"></param>
        /// <returns>ApiResponse of UpdateAccepted</returns>
        public ApiResponse<UpdateAccepted> UpdateOrgWithHttpInfo (string name, OrganizationUpdate organizationUpdate)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling OrgsApi->UpdateOrg");
            // verify the required parameter 'organizationUpdate' is set
            if (organizationUpdate == null)
                throw new ApiException(400, "Missing required parameter 'organizationUpdate' when calling OrgsApi->UpdateOrg");

            var localVarPath = "/orgs/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (organizationUpdate != null && organizationUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(organizationUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = organizationUpdate; // byte array
            }

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateOrg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateAccepted>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdateAccepted) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateAccepted)));
        }

        /// <summary>
        /// Update an Org Update a org (must have org &#x60;owner&#x60; role)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="organizationUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UpdateAccepted</returns>
        public async System.Threading.Tasks.Task<UpdateAccepted> UpdateOrgAsync (string name, OrganizationUpdate organizationUpdate, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<UpdateAccepted> localVarResponse = await UpdateOrgWithHttpInfoAsync(name, organizationUpdate, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an Org Update a org (must have org &#x60;owner&#x60; role)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="organizationUpdate"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UpdateAccepted)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateAccepted>> UpdateOrgWithHttpInfoAsync (string name, OrganizationUpdate organizationUpdate, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling OrgsApi->UpdateOrg");
            // verify the required parameter 'organizationUpdate' is set
            if (organizationUpdate == null)
                throw new ApiException(400, "Missing required parameter 'organizationUpdate' when calling OrgsApi->UpdateOrg");

            var localVarPath = "/orgs/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (organizationUpdate != null && organizationUpdate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(organizationUpdate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = organizationUpdate; // byte array
            }

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateOrg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateAccepted>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdateAccepted) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateAccepted)));
        }

        /// <summary>
        /// Add or update the role of an Org Member Upsert a member role to the org (must have org &#x60;owner&#x60; role)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="username"></param>
        /// <param name="role"></param>
        /// <returns>UpdateAccepted</returns>
        public UpdateAccepted UpsertOrgMember (string name, string username, OrganizationRoleEnum role)
        {
             ApiResponse<UpdateAccepted> localVarResponse = UpsertOrgMemberWithHttpInfo(name, username, role);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add or update the role of an Org Member Upsert a member role to the org (must have org &#x60;owner&#x60; role)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="username"></param>
        /// <param name="role"></param>
        /// <returns>ApiResponse of UpdateAccepted</returns>
        public ApiResponse<UpdateAccepted> UpsertOrgMemberWithHttpInfo (string name, string username, OrganizationRoleEnum role)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling OrgsApi->UpsertOrgMember");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling OrgsApi->UpsertOrgMember");
            // verify the required parameter 'role' is set
            if (role == null)
                throw new ApiException(400, "Missing required parameter 'role' when calling OrgsApi->UpsertOrgMember");

            var localVarPath = "/orgs/{name}/members/{username}/{role}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (username != null) localVarPathParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (role != null) localVarPathParams.Add("role", this.Configuration.ApiClient.ParameterToString(role)); // path parameter

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpsertOrgMember", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateAccepted>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdateAccepted) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateAccepted)));
        }

        /// <summary>
        /// Add or update the role of an Org Member Upsert a member role to the org (must have org &#x60;owner&#x60; role)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="username"></param>
        /// <param name="role"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of UpdateAccepted</returns>
        public async System.Threading.Tasks.Task<UpdateAccepted> UpsertOrgMemberAsync (string name, string username, OrganizationRoleEnum role, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<UpdateAccepted> localVarResponse = await UpsertOrgMemberWithHttpInfoAsync(name, username, role, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add or update the role of an Org Member Upsert a member role to the org (must have org &#x60;owner&#x60; role)
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="username"></param>
        /// <param name="role"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (UpdateAccepted)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateAccepted>> UpsertOrgMemberWithHttpInfoAsync (string name, string username, OrganizationRoleEnum role, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling OrgsApi->UpsertOrgMember");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling OrgsApi->UpsertOrgMember");
            // verify the required parameter 'role' is set
            if (role == null)
                throw new ApiException(400, "Missing required parameter 'role' when calling OrgsApi->UpsertOrgMember");

            var localVarPath = "/orgs/{name}/members/{username}/{role}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (username != null) localVarPathParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // path parameter
            if (role != null) localVarPathParams.Add("role", this.Configuration.ApiClient.ParameterToString(role)); // path parameter

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpsertOrgMember", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdateAccepted>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (UpdateAccepted) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdateAccepted)));
        }

    }
}
