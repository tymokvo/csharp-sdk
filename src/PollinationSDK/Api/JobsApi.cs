/* 
 * pollination-server
 *
 * Pollination Server OpenAPI Definition
 *
 * The version of the OpenAPI document: 0.13.1
 * Contact: info@pollination.cloud
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using PollinationSDK.Client;
using PollinationSDK.Model;

namespace PollinationSDK.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IJobsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Cancel a Job
        /// </summary>
        /// <remarks>
        /// Retrieve a job.
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="jobId"></param>
        /// <returns>object</returns>
        object CancelJob (string owner, string name, string jobId);

        /// <summary>
        /// Cancel a Job
        /// </summary>
        /// <remarks>
        /// Retrieve a job.
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="jobId"></param>
        /// <returns>ApiResponse of object</returns>
        ApiResponse<object> CancelJobWithHttpInfo (string owner, string name, string jobId);
        /// <summary>
        /// Schedule a job
        /// </summary>
        /// <remarks>
        /// Create a new job.
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="job"></param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="xPollinationToken"> (optional)</param>
        /// <returns>CreatedContent</returns>
        CreatedContent CreateJob (string owner, string name, Job job, string authorization = default, string xPollinationToken = default);

        /// <summary>
        /// Schedule a job
        /// </summary>
        /// <remarks>
        /// Create a new job.
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="job"></param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="xPollinationToken"> (optional)</param>
        /// <returns>ApiResponse of CreatedContent</returns>
        ApiResponse<CreatedContent> CreateJobWithHttpInfo (string owner, string name, Job job, string authorization = default, string xPollinationToken = default);
        /// <summary>
        /// Download an artifact from the job folder
        /// </summary>
        /// <remarks>
        /// Get a download link for an artifact in a job folder
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="jobId"></param>
        /// <param name="path">The path to an file within a project folder (optional)</param>
        /// <returns>object</returns>
        object DownloadJobArtifact (string owner, string name, string jobId, string path = default);

        /// <summary>
        /// Download an artifact from the job folder
        /// </summary>
        /// <remarks>
        /// Get a download link for an artifact in a job folder
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="jobId"></param>
        /// <param name="path">The path to an file within a project folder (optional)</param>
        /// <returns>ApiResponse of object</returns>
        ApiResponse<object> DownloadJobArtifactWithHttpInfo (string owner, string name, string jobId, string path = default);
        /// <summary>
        /// Get a Job
        /// </summary>
        /// <remarks>
        /// Retrieve a job.
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="jobId"></param>
        /// <returns>CloudJob</returns>
        CloudJob GetJob (string owner, string name, string jobId);

        /// <summary>
        /// Get a Job
        /// </summary>
        /// <remarks>
        /// Retrieve a job.
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="jobId"></param>
        /// <returns>ApiResponse of CloudJob</returns>
        ApiResponse<CloudJob> GetJobWithHttpInfo (string owner, string name, string jobId);
        /// <summary>
        /// List Jobs
        /// </summary>
        /// <remarks>
        /// Retrieve a list of jobs.
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="ids"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <returns>CloudJobList</returns>
        CloudJobList ListJobs (string owner, string name, List<string> ids = default, JobStatusEnum? status = default, int? page = default, int? perPage = default);

        /// <summary>
        /// List Jobs
        /// </summary>
        /// <remarks>
        /// Retrieve a list of jobs.
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="ids"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <returns>ApiResponse of CloudJobList</returns>
        ApiResponse<CloudJobList> ListJobsWithHttpInfo (string owner, string name, List<string> ids = default, JobStatusEnum? status = default, int? page = default, int? perPage = default);
        /// <summary>
        /// List files/folders in a job folder
        /// </summary>
        /// <remarks>
        /// Retrieve a list of artifacts in a job folder
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="jobId"></param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="path">The path to an file within a project folder (optional)</param>
        /// <returns>List&lt;FileMeta&gt;</returns>
        List<FileMeta> SearchJobFolder (string owner, string name, string jobId, int? page = default, int? perPage = default, List<string> path = default);

        /// <summary>
        /// List files/folders in a job folder
        /// </summary>
        /// <remarks>
        /// Retrieve a list of artifacts in a job folder
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="jobId"></param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="path">The path to an file within a project folder (optional)</param>
        /// <returns>ApiResponse of List&lt;FileMeta&gt;</returns>
        ApiResponse<List<FileMeta>> SearchJobFolderWithHttpInfo (string owner, string name, string jobId, int? page = default, int? perPage = default, List<string> path = default);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Cancel a Job
        /// </summary>
        /// <remarks>
        /// Retrieve a job.
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="jobId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of object</returns>
        System.Threading.Tasks.Task<object> CancelJobAsync (string owner, string name, string jobId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Cancel a Job
        /// </summary>
        /// <remarks>
        /// Retrieve a job.
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="jobId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (object)</returns>
        System.Threading.Tasks.Task<ApiResponse<object>> CancelJobWithHttpInfoAsync (string owner, string name, string jobId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Schedule a job
        /// </summary>
        /// <remarks>
        /// Create a new job.
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="job"></param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="xPollinationToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CreatedContent</returns>
        System.Threading.Tasks.Task<CreatedContent> CreateJobAsync (string owner, string name, Job job, string authorization = default, string xPollinationToken = default, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Schedule a job
        /// </summary>
        /// <remarks>
        /// Create a new job.
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="job"></param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="xPollinationToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CreatedContent)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreatedContent>> CreateJobWithHttpInfoAsync (string owner, string name, Job job, string authorization = default, string xPollinationToken = default, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Download an artifact from the job folder
        /// </summary>
        /// <remarks>
        /// Get a download link for an artifact in a job folder
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="jobId"></param>
        /// <param name="path">The path to an file within a project folder (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of object</returns>
        System.Threading.Tasks.Task<object> DownloadJobArtifactAsync (string owner, string name, string jobId, string path = default, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Download an artifact from the job folder
        /// </summary>
        /// <remarks>
        /// Get a download link for an artifact in a job folder
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="jobId"></param>
        /// <param name="path">The path to an file within a project folder (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (object)</returns>
        System.Threading.Tasks.Task<ApiResponse<object>> DownloadJobArtifactWithHttpInfoAsync (string owner, string name, string jobId, string path = default, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get a Job
        /// </summary>
        /// <remarks>
        /// Retrieve a job.
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="jobId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CloudJob</returns>
        System.Threading.Tasks.Task<CloudJob> GetJobAsync (string owner, string name, string jobId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a Job
        /// </summary>
        /// <remarks>
        /// Retrieve a job.
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="jobId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CloudJob)</returns>
        System.Threading.Tasks.Task<ApiResponse<CloudJob>> GetJobWithHttpInfoAsync (string owner, string name, string jobId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List Jobs
        /// </summary>
        /// <remarks>
        /// Retrieve a list of jobs.
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="ids"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CloudJobList</returns>
        System.Threading.Tasks.Task<CloudJobList> ListJobsAsync (string owner, string name, List<string> ids = default, JobStatusEnum? status = default, int? page = default, int? perPage = default, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List Jobs
        /// </summary>
        /// <remarks>
        /// Retrieve a list of jobs.
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="ids"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CloudJobList)</returns>
        System.Threading.Tasks.Task<ApiResponse<CloudJobList>> ListJobsWithHttpInfoAsync (string owner, string name, List<string> ids = default, JobStatusEnum? status = default, int? page = default, int? perPage = default, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// List files/folders in a job folder
        /// </summary>
        /// <remarks>
        /// Retrieve a list of artifacts in a job folder
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="jobId"></param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="path">The path to an file within a project folder (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;FileMeta&gt;</returns>
        System.Threading.Tasks.Task<List<FileMeta>> SearchJobFolderAsync (string owner, string name, string jobId, int? page = default, int? perPage = default, List<string> path = default, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// List files/folders in a job folder
        /// </summary>
        /// <remarks>
        /// Retrieve a list of artifacts in a job folder
        /// </remarks>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="jobId"></param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="path">The path to an file within a project folder (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;FileMeta&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FileMeta>>> SearchJobFolderWithHttpInfoAsync (string owner, string name, string jobId, int? page = default, int? perPage = default, List<string> path = default, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class JobsApi : IJobsApi
    {
        private PollinationSDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="JobsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public JobsApi(String basePath)
        {
            this.Configuration = new PollinationSDK.Client.Configuration { BasePath = basePath };

            ExceptionFactory = PollinationSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JobsApi"/> class
        /// </summary>
        /// <returns></returns>
        public JobsApi()
        {
            this.Configuration = PollinationSDK.Client.Configuration.Default;

            ExceptionFactory = PollinationSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JobsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public JobsApi(PollinationSDK.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = PollinationSDK.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = PollinationSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public PollinationSDK.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public PollinationSDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Cancel a Job Retrieve a job.
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="jobId"></param>
        /// <returns>object</returns>
        public object CancelJob (string owner, string name, string jobId)
        {
             ApiResponse<object> localVarResponse = CancelJobWithHttpInfo(owner, name, jobId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel a Job Retrieve a job.
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="jobId"></param>
        /// <returns>ApiResponse of object</returns>
        public ApiResponse<object> CancelJobWithHttpInfo (string owner, string name, string jobId)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling JobsApi->CancelJob");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling JobsApi->CancelJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling JobsApi->CancelJob");

            var localVarPath = "/projects/{owner}/{name}/jobs/{job_id}/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (jobId != null) localVarPathParams.Add("job_id", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(object)));
        }

        /// <summary>
        /// Cancel a Job Retrieve a job.
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="jobId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of object</returns>
        public async System.Threading.Tasks.Task<object> CancelJobAsync (string owner, string name, string jobId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<object> localVarResponse = await CancelJobWithHttpInfoAsync(owner, name, jobId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel a Job Retrieve a job.
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="jobId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<object>> CancelJobWithHttpInfoAsync (string owner, string name, string jobId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling JobsApi->CancelJob");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling JobsApi->CancelJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling JobsApi->CancelJob");

            var localVarPath = "/projects/{owner}/{name}/jobs/{job_id}/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (jobId != null) localVarPathParams.Add("job_id", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(object)));
        }

        /// <summary>
        /// Schedule a job Create a new job.
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="job"></param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="xPollinationToken"> (optional)</param>
        /// <returns>CreatedContent</returns>
        public CreatedContent CreateJob (string owner, string name, Job job, string authorization = default, string xPollinationToken = default)
        {
             ApiResponse<CreatedContent> localVarResponse = CreateJobWithHttpInfo(owner, name, job, authorization, xPollinationToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Schedule a job Create a new job.
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="job"></param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="xPollinationToken"> (optional)</param>
        /// <returns>ApiResponse of CreatedContent</returns>
        public ApiResponse<CreatedContent> CreateJobWithHttpInfo (string owner, string name, Job job, string authorization = default, string xPollinationToken = default)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling JobsApi->CreateJob");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling JobsApi->CreateJob");
            // verify the required parameter 'job' is set
            if (job == null)
                throw new ApiException(400, "Missing required parameter 'job' when calling JobsApi->CreateJob");

            var localVarPath = "/projects/{owner}/{name}/jobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xPollinationToken != null) localVarHeaderParams.Add("x-pollination-token", this.Configuration.ApiClient.ParameterToString(xPollinationToken)); // header parameter
            if (job != null && job.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(job); // http body (model) parameter
            }
            else
            {
                localVarPostBody = job; // byte array
            }

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreatedContent>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreatedContent) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreatedContent)));
        }

        /// <summary>
        /// Schedule a job Create a new job.
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="job"></param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="xPollinationToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CreatedContent</returns>
        public async System.Threading.Tasks.Task<CreatedContent> CreateJobAsync (string owner, string name, Job job, string authorization = default, string xPollinationToken = default, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CreatedContent> localVarResponse = await CreateJobWithHttpInfoAsync(owner, name, job, authorization, xPollinationToken, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Schedule a job Create a new job.
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="job"></param>
        /// <param name="authorization"> (optional)</param>
        /// <param name="xPollinationToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CreatedContent)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreatedContent>> CreateJobWithHttpInfoAsync (string owner, string name, Job job, string authorization = default, string xPollinationToken = default, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling JobsApi->CreateJob");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling JobsApi->CreateJob");
            // verify the required parameter 'job' is set
            if (job == null)
                throw new ApiException(400, "Missing required parameter 'job' when calling JobsApi->CreateJob");

            var localVarPath = "/projects/{owner}/{name}/jobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xPollinationToken != null) localVarHeaderParams.Add("x-pollination-token", this.Configuration.ApiClient.ParameterToString(xPollinationToken)); // header parameter
            if (job != null && job.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(job); // http body (model) parameter
            }
            else
            {
                localVarPostBody = job; // byte array
            }

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreatedContent>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreatedContent) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreatedContent)));
        }

        /// <summary>
        /// Download an artifact from the job folder Get a download link for an artifact in a job folder
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="jobId"></param>
        /// <param name="path">The path to an file within a project folder (optional)</param>
        /// <returns>object</returns>
        public object DownloadJobArtifact (string owner, string name, string jobId, string path = default)
        {
             ApiResponse<object> localVarResponse = DownloadJobArtifactWithHttpInfo(owner, name, jobId, path);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Download an artifact from the job folder Get a download link for an artifact in a job folder
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="jobId"></param>
        /// <param name="path">The path to an file within a project folder (optional)</param>
        /// <returns>ApiResponse of object</returns>
        public ApiResponse<object> DownloadJobArtifactWithHttpInfo (string owner, string name, string jobId, string path = default)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling JobsApi->DownloadJobArtifact");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling JobsApi->DownloadJobArtifact");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling JobsApi->DownloadJobArtifact");

            var localVarPath = "/projects/{owner}/{name}/jobs/{job_id}/artifacts/download";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (jobId != null) localVarPathParams.Add("job_id", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter
            if (path != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "path", path)); // query parameter

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadJobArtifact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(object)));
        }

        /// <summary>
        /// Download an artifact from the job folder Get a download link for an artifact in a job folder
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="jobId"></param>
        /// <param name="path">The path to an file within a project folder (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of object</returns>
        public async System.Threading.Tasks.Task<object> DownloadJobArtifactAsync (string owner, string name, string jobId, string path = default, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<object> localVarResponse = await DownloadJobArtifactWithHttpInfoAsync(owner, name, jobId, path, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Download an artifact from the job folder Get a download link for an artifact in a job folder
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="jobId"></param>
        /// <param name="path">The path to an file within a project folder (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<object>> DownloadJobArtifactWithHttpInfoAsync (string owner, string name, string jobId, string path = default, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling JobsApi->DownloadJobArtifact");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling JobsApi->DownloadJobArtifact");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling JobsApi->DownloadJobArtifact");

            var localVarPath = "/projects/{owner}/{name}/jobs/{job_id}/artifacts/download";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (jobId != null) localVarPathParams.Add("job_id", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter
            if (path != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "path", path)); // query parameter

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadJobArtifact", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(object)));
        }

        /// <summary>
        /// Get a Job Retrieve a job.
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="jobId"></param>
        /// <returns>CloudJob</returns>
        public CloudJob GetJob (string owner, string name, string jobId)
        {
             ApiResponse<CloudJob> localVarResponse = GetJobWithHttpInfo(owner, name, jobId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Job Retrieve a job.
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="jobId"></param>
        /// <returns>ApiResponse of CloudJob</returns>
        public ApiResponse<CloudJob> GetJobWithHttpInfo (string owner, string name, string jobId)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling JobsApi->GetJob");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling JobsApi->GetJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling JobsApi->GetJob");

            var localVarPath = "/projects/{owner}/{name}/jobs/{job_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (jobId != null) localVarPathParams.Add("job_id", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CloudJob>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CloudJob) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CloudJob)));
        }

        /// <summary>
        /// Get a Job Retrieve a job.
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="jobId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CloudJob</returns>
        public async System.Threading.Tasks.Task<CloudJob> GetJobAsync (string owner, string name, string jobId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CloudJob> localVarResponse = await GetJobWithHttpInfoAsync(owner, name, jobId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a Job Retrieve a job.
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="jobId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CloudJob)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CloudJob>> GetJobWithHttpInfoAsync (string owner, string name, string jobId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling JobsApi->GetJob");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling JobsApi->GetJob");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling JobsApi->GetJob");

            var localVarPath = "/projects/{owner}/{name}/jobs/{job_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (jobId != null) localVarPathParams.Add("job_id", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CloudJob>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CloudJob) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CloudJob)));
        }

        /// <summary>
        /// List Jobs Retrieve a list of jobs.
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="ids"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <returns>CloudJobList</returns>
        public CloudJobList ListJobs (string owner, string name, List<string> ids = default, JobStatusEnum? status = default, int? page = default, int? perPage = default)
        {
             ApiResponse<CloudJobList> localVarResponse = ListJobsWithHttpInfo(owner, name, ids, status, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Jobs Retrieve a list of jobs.
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="ids"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <returns>ApiResponse of CloudJobList</returns>
        public ApiResponse<CloudJobList> ListJobsWithHttpInfo (string owner, string name, List<string> ids = default, JobStatusEnum? status = default, int? page = default, int? perPage = default)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling JobsApi->ListJobs");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling JobsApi->ListJobs");

            var localVarPath = "/projects/{owner}/{name}/jobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "ids", ids)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per-page", perPage)); // query parameter

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListJobs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CloudJobList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CloudJobList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CloudJobList)));
        }

        /// <summary>
        /// List Jobs Retrieve a list of jobs.
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="ids"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of CloudJobList</returns>
        public async System.Threading.Tasks.Task<CloudJobList> ListJobsAsync (string owner, string name, List<string> ids = default, JobStatusEnum? status = default, int? page = default, int? perPage = default, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<CloudJobList> localVarResponse = await ListJobsWithHttpInfoAsync(owner, name, ids, status, page, perPage, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Jobs Retrieve a list of jobs.
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="ids"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (CloudJobList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CloudJobList>> ListJobsWithHttpInfoAsync (string owner, string name, List<string> ids = default, JobStatusEnum? status = default, int? page = default, int? perPage = default, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling JobsApi->ListJobs");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling JobsApi->ListJobs");

            var localVarPath = "/projects/{owner}/{name}/jobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "ids", ids)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per-page", perPage)); // query parameter

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListJobs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CloudJobList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CloudJobList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CloudJobList)));
        }

        /// <summary>
        /// List files/folders in a job folder Retrieve a list of artifacts in a job folder
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="jobId"></param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="path">The path to an file within a project folder (optional)</param>
        /// <returns>List&lt;FileMeta&gt;</returns>
        public List<FileMeta> SearchJobFolder (string owner, string name, string jobId, int? page = default, int? perPage = default, List<string> path = default)
        {
             ApiResponse<List<FileMeta>> localVarResponse = SearchJobFolderWithHttpInfo(owner, name, jobId, page, perPage, path);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List files/folders in a job folder Retrieve a list of artifacts in a job folder
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="jobId"></param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="path">The path to an file within a project folder (optional)</param>
        /// <returns>ApiResponse of List&lt;FileMeta&gt;</returns>
        public ApiResponse<List<FileMeta>> SearchJobFolderWithHttpInfo (string owner, string name, string jobId, int? page = default, int? perPage = default, List<string> path = default)
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling JobsApi->SearchJobFolder");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling JobsApi->SearchJobFolder");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling JobsApi->SearchJobFolder");

            var localVarPath = "/projects/{owner}/{name}/jobs/{job_id}/artifacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (jobId != null) localVarPathParams.Add("job_id", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per-page", perPage)); // query parameter
            if (path != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "path", path)); // query parameter

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchJobFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FileMeta>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<FileMeta>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FileMeta>)));
        }

        /// <summary>
        /// List files/folders in a job folder Retrieve a list of artifacts in a job folder
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="jobId"></param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="path">The path to an file within a project folder (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;FileMeta&gt;</returns>
        public async System.Threading.Tasks.Task<List<FileMeta>> SearchJobFolderAsync (string owner, string name, string jobId, int? page = default, int? perPage = default, List<string> path = default, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<FileMeta>> localVarResponse = await SearchJobFolderWithHttpInfoAsync(owner, name, jobId, page, perPage, path, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List files/folders in a job folder Retrieve a list of artifacts in a job folder
        /// </summary>
        /// <exception cref="PollinationSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="owner"></param>
        /// <param name="name"></param>
        /// <param name="jobId"></param>
        /// <param name="page">Page number starting from 1 (optional, default to 1)</param>
        /// <param name="perPage">Number of items per page (optional, default to 25)</param>
        /// <param name="path">The path to an file within a project folder (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;FileMeta&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<FileMeta>>> SearchJobFolderWithHttpInfoAsync (string owner, string name, string jobId, int? page = default, int? perPage = default, List<string> path = default, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'owner' is set
            if (owner == null)
                throw new ApiException(400, "Missing required parameter 'owner' when calling JobsApi->SearchJobFolder");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling JobsApi->SearchJobFolder");
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling JobsApi->SearchJobFolder");

            var localVarPath = "/projects/{owner}/{name}/jobs/{job_id}/artifacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (owner != null) localVarPathParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (jobId != null) localVarPathParams.Add("job_id", this.Configuration.ApiClient.ParameterToString(jobId)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (perPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "per-page", perPage)); // query parameter
            if (path != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "path", path)); // query parameter

            // authentication (APIKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-pollination-token")))
            {
                localVarHeaderParams["x-pollination-token"] = this.Configuration.GetApiKeyWithPrefix("x-pollination-token");
            }
            // authentication (JWTAuth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchJobFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FileMeta>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<FileMeta>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FileMeta>)));
        }

    }
}
